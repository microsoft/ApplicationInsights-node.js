{"version":3,"file":"RequestParser.js","sourceRoot":"","sources":["../../AutoCollection/RequestParser.ts"],"names":[],"mappings":";AAAA;;;GAGG;AACH;IAAA;IA2CA,CAAC;IAnCG;;OAEG;IACI,8BAAM,GAAb;QACI,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAES,qCAAa,GAAvB;QACI,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;IACjC,CAAC;IAES,kCAAU,GAApB,UAAqB,MAAc,EAAE,KAAqB;QACtD,IAAI,OAAO,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QAEzB,IAAI,UAAU,GAA4B,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC;QAChE,IAAI,KAAK,EAAE;YACP,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC3B,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aAC/B;iBAAM,IAAI,KAAK,YAAY,KAAK,EAAE;gBAC/B,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;aACvC;iBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAClC,KAAK,IAAI,GAAG,IAAS,KAAK,EAAE;oBACxB,UAAU,CAAC,GAAG,CAAC,GAAS,KAAM,CAAC,GAAG,CAAC,IAAU,KAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,IAAU,KAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;iBACrG;aACJ;SACJ;QAED,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAES,kCAAU,GAApB;QACI,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC;IAC5D,CAAC;IACL,oBAAC;AAAD,CAAC,AA3CD,IA2CC;AAED,iBAAS,aAAa,CAAC","sourcesContent":["/**\n * Base class for helpers that read data from HTTP request/response objects and convert them\n * into the telemetry contract objects.\n */\nabstract class RequestParser {\n    protected method: string;\n    protected url: string;\n    protected startTime: number;\n    protected duration: number;\n    protected statusCode: number;\n    protected properties: { [key: string]: string };\n\n    /**\n     * Gets a url parsed out from request options\n     */\n    public getUrl(): string {\n        return this.url;\n    }\n\n    protected RequestParser() {\n        this.startTime = +new Date();\n    }\n\n    protected _setStatus(status: number, error: Error | string) {\n        let endTime = +new Date();\n        this.duration = endTime - this.startTime;\n        this.statusCode = status;\n\n        let properties: {[key: string]: string} = this.properties || {};\n        if (error) {\n            if (typeof error === \"string\") {\n                properties[\"error\"] = error;\n            } else if (error instanceof Error) {\n                properties[\"error\"] = error.message;\n            } else if (typeof error === \"object\") {\n                for (var key in <any>error) {\n                    properties[key] = (<any>error)[key] && (<any>error)[key].toString && (<any>error)[key].toString();\n                }\n            }\n        }\n\n        this.properties = properties;\n    }\n\n    protected _isSuccess() {\n        return (0 < this.statusCode) && (this.statusCode < 400);\n    }\n}\n\nexport = RequestParser;\n"]}