{"version":3,"file":"Performance.js","sourceRoot":"","sources":["../../AutoCollection/Performance.ts"],"names":[],"mappings":"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","sourcesContent":["import os = require(\"os\");\n\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\nimport Constants = require(\"../Declarations/Constants\");\n\nclass AutoCollectPerformance {\n\n    public static INSTANCE: AutoCollectPerformance;\n\n    private static _totalRequestCount: number = 0;\n    private static _totalFailedRequestCount: number = 0;\n    private static _totalDependencyCount: number = 0;\n    private static _totalFailedDependencyCount: number = 0;\n    private static _totalExceptionCount: number = 0;\n    private static _intervalDependencyExecutionTime: number = 0;\n    private static _intervalRequestExecutionTime: number = 0;\n\n    private _lastIntervalRequestExecutionTime: number = 0; // the sum of durations which took place during from app start until last interval\n    private _lastIntervalDependencyExecutionTime: number = 0;\n    private _enableLiveMetricsCounters: boolean;\n    private _collectionInterval: number;\n    private _client: TelemetryClient;\n    private _handle: NodeJS.Timer;\n    private _isEnabled: boolean;\n    private _isInitialized: boolean;\n    private _lastAppCpuUsage: { user: number, system: number };\n    private _lastHrtime: number[];\n    private _lastCpus: { model: string; speed: number; times: { user: number; nice: number; sys: number; idle: number; irq: number; }; }[];\n    private _lastDependencies: { totalDependencyCount: number; totalFailedDependencyCount: number; time: number; };\n    private _lastRequests: { totalRequestCount: number; totalFailedRequestCount: number; time: number; };\n    private _lastExceptions: { totalExceptionCount: number, time: number };\n\n    /**\n     * @param enableLiveMetricsCounters - enable sending additional live metrics information (dependency metrics, exception metrics, committed memory)\n     */\n    constructor(client: TelemetryClient, collectionInterval = 60000, enableLiveMetricsCounters = false) {\n        if (!AutoCollectPerformance.INSTANCE) {\n            AutoCollectPerformance.INSTANCE = this;\n        }\n\n        this._lastRequests = { totalRequestCount: 0, totalFailedRequestCount: 0, time: 0 };\n        this._lastDependencies = { totalDependencyCount: 0, totalFailedDependencyCount: 0, time: 0 };\n        this._lastExceptions = { totalExceptionCount: 0,time: 0 };\n        this._isInitialized = false;\n        this._client = client;\n        this._collectionInterval = collectionInterval;\n        this._enableLiveMetricsCounters = enableLiveMetricsCounters;\n    }\n\n    public enable(isEnabled: boolean, collectionInterval?: number) {\n        this._isEnabled = isEnabled;\n        if (this._isEnabled && !this._isInitialized) {\n            this._isInitialized = true;\n        }\n\n        if (isEnabled) {\n            if (!this._handle) {\n                this._lastCpus = os.cpus();\n                this._lastRequests = {\n                    totalRequestCount: AutoCollectPerformance._totalRequestCount,\n                    totalFailedRequestCount: AutoCollectPerformance._totalFailedRequestCount,\n                    time: +new Date\n                };\n                this._lastDependencies = {\n                    totalDependencyCount: AutoCollectPerformance._totalDependencyCount,\n                    totalFailedDependencyCount: AutoCollectPerformance._totalFailedDependencyCount,\n                    time: +new Date\n                };\n                this._lastExceptions = {\n                    totalExceptionCount: AutoCollectPerformance._totalExceptionCount,\n                    time: +new Date\n                };\n\n                if (typeof (process as any).cpuUsage === \"function\") {\n                    this._lastAppCpuUsage = (process as any).cpuUsage();\n                }\n                this._lastHrtime = process.hrtime();\n                this._collectionInterval = collectionInterval || this._collectionInterval;\n                this._handle = setInterval(() => this.trackPerformance(), this._collectionInterval);\n                this._handle.unref(); // Allow the app to terminate even while this loop is going on\n            }\n        } else {\n            if (this._handle) {\n                clearInterval(this._handle);\n                this._handle = undefined;\n            }\n        }\n    }\n\n    public static countRequest(duration: number | string, success: boolean) {\n        let durationMs: number;\n        if (!AutoCollectPerformance.isEnabled()) {\n            return;\n        }\n\n        if (typeof duration === \"string\") {\n            // dependency duration is passed in as \"00:00:00.123\" by autocollectors\n            durationMs = +new Date(\"1970-01-01T\" + duration + \"Z\"); // convert to num ms, returns NaN if wrong\n        } else if (typeof duration === \"number\") {\n            durationMs = duration;\n        } else {\n            return;\n        }\n\n        AutoCollectPerformance._intervalRequestExecutionTime += durationMs;\n        if (success === false) {\n            AutoCollectPerformance._totalFailedRequestCount++;\n        }\n        AutoCollectPerformance._totalRequestCount++;\n    }\n\n    public static countException() {\n        AutoCollectPerformance._totalExceptionCount++;\n    }\n\n    public static countDependency(duration: number | string, success: boolean) {\n        let durationMs: number;\n        if (!AutoCollectPerformance.isEnabled()) {\n            return;\n        }\n\n        if (typeof duration === \"string\") {\n            // dependency duration is passed in as \"00:00:00.123\" by autocollectors\n            durationMs = +new Date(\"1970-01-01T\" + duration + \"Z\"); // convert to num ms, returns NaN if wrong\n        } else if (typeof duration === \"number\") {\n            durationMs = duration;\n        } else {\n            return;\n        }\n\n        AutoCollectPerformance._intervalDependencyExecutionTime += durationMs;\n        if (success === false) {\n            AutoCollectPerformance._totalFailedDependencyCount++;\n        }\n        AutoCollectPerformance._totalDependencyCount++;\n    }\n\n    public isInitialized() {\n        return this._isInitialized;\n    }\n\n    public static isEnabled() {\n        return AutoCollectPerformance.INSTANCE && AutoCollectPerformance.INSTANCE._isEnabled;\n    }\n\n    public trackPerformance() {\n        this._trackCpu();\n        this._trackMemory();\n        this._trackNetwork();\n        this._trackDependencyRate();\n        this._trackExceptionRate();\n    }\n\n    private _trackCpu() {\n        // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\n        // to find the delta since the last measurement\n        var cpus = os.cpus();\n        if (cpus && cpus.length && this._lastCpus && cpus.length === this._lastCpus.length) {\n            var totalUser = 0;\n            var totalSys = 0;\n            var totalNice = 0;\n            var totalIdle = 0;\n            var totalIrq = 0;\n            for (var i = 0; !!cpus && i < cpus.length; i++) {\n                var cpu = cpus[i];\n                var lastCpu = this._lastCpus[i];\n\n                var name = \"% cpu(\" + i + \") \";\n                var model = cpu.model;\n                var speed = cpu.speed;\n                var times = cpu.times;\n                var lastTimes = lastCpu.times;\n\n                // user cpu time (or) % CPU time spent in user space\n                var user = (times.user - lastTimes.user) || 0;\n                totalUser += user;\n\n                // system cpu time (or) % CPU time spent in kernel space\n                var sys = (times.sys - lastTimes.sys) || 0;\n                totalSys += sys;\n\n                // user nice cpu time (or) % CPU time spent on low priority processes\n                var nice = (times.nice - lastTimes.nice) || 0;\n                totalNice += nice;\n\n                // idle cpu time (or) % CPU time spent idle\n                var idle = (times.idle - lastTimes.idle) || 0;\n                totalIdle += idle;\n\n                // irq (or) % CPU time spent servicing/handling hardware interrupts\n                var irq = (times.irq - lastTimes.irq) || 0;\n                totalIrq += irq;\n            }\n\n            // Calculate % of total cpu time (user + system) this App Process used (Only supported by node v6.1.0+)\n            let appCpuPercent: number = undefined;\n            if (typeof (process as any).cpuUsage === \"function\") {\n                const appCpuUsage = (process as any).cpuUsage();\n                const hrtime = process.hrtime();\n\n                const totalApp = ((appCpuUsage.user - this._lastAppCpuUsage.user) + (appCpuUsage.system - this._lastAppCpuUsage.system)) || 0;\n\n                if (typeof this._lastHrtime !== \"undefined\" && this._lastHrtime.length === 2) {\n                    const elapsedTime = ((hrtime[0] - this._lastHrtime[0]) * 1e6 + (hrtime[1] - this._lastHrtime[1]) / 1e3) || 0; // convert to microseconds\n\n                    appCpuPercent = 100 * totalApp / (elapsedTime * cpus.length);\n                }\n\n                // Set previous\n                this._lastAppCpuUsage = appCpuUsage;\n                this._lastHrtime = hrtime;\n            }\n\n            var combinedTotal = (totalUser + totalSys + totalNice + totalIdle + totalIrq) || 1;\n\n            this._client.trackMetric({ name: Constants.PerformanceCounter.PROCESSOR_TIME, value: ((combinedTotal - totalIdle) / combinedTotal) * 100 });\n            this._client.trackMetric({ name: Constants.PerformanceCounter.PROCESS_TIME, value: appCpuPercent || ((totalUser / combinedTotal) * 100) });\n        }\n\n        this._lastCpus = cpus;\n    }\n\n    private _trackMemory() {\n        var freeMem = os.freemem();\n        var usedMem = process.memoryUsage().rss;\n        var committedMemory = os.totalmem() - freeMem;\n        this._client.trackMetric({ name: Constants.PerformanceCounter.PRIVATE_BYTES, value: usedMem });\n        this._client.trackMetric({ name: Constants.PerformanceCounter.AVAILABLE_BYTES, value: freeMem });\n\n        // Only supported by quickpulse service\n        if (this._enableLiveMetricsCounters) {\n            this._client.trackMetric({ name: Constants.QuickPulseCounter.COMMITTED_BYTES, value: committedMemory });\n        }\n    }\n\n    private _trackNetwork() {\n        // track total request counters\n        var lastRequests = this._lastRequests;\n        var requests = {\n            totalRequestCount: AutoCollectPerformance._totalRequestCount,\n            totalFailedRequestCount: AutoCollectPerformance._totalFailedRequestCount,\n            time: +new Date\n        };\n\n        var intervalRequests = (requests.totalRequestCount - lastRequests.totalRequestCount) || 0;\n        var intervalFailedRequests = (requests.totalFailedRequestCount - lastRequests.totalFailedRequestCount) || 0;\n        var elapsedMs = requests.time - lastRequests.time;\n        var elapsedSeconds = elapsedMs / 1000;\n        var averageRequestExecutionTime = ((AutoCollectPerformance._intervalRequestExecutionTime - this._lastIntervalRequestExecutionTime) / intervalRequests) || 0; // default to 0 in case no requests in this interval\n        this._lastIntervalRequestExecutionTime = AutoCollectPerformance._intervalRequestExecutionTime // reset\n\n        if (elapsedMs > 0) {\n            var requestsPerSec = intervalRequests / elapsedSeconds;\n            var failedRequestsPerSec = intervalFailedRequests / elapsedSeconds;\n\n            this._client.trackMetric({ name: Constants.PerformanceCounter.REQUEST_RATE, value: requestsPerSec });\n\n            // Only send duration to live metrics if it has been updated!\n            if (!this._enableLiveMetricsCounters || intervalRequests > 0) {\n                this._client.trackMetric({ name: Constants.PerformanceCounter.REQUEST_DURATION, value: averageRequestExecutionTime });\n            }\n\n            // Only supported by quickpulse service\n            if (this._enableLiveMetricsCounters) {\n                this._client.trackMetric({ name: Constants.QuickPulseCounter.REQUEST_FAILURE_RATE, value: failedRequestsPerSec });\n            }\n        }\n\n        this._lastRequests = requests;\n    }\n\n    // Static counter is accumulated externally. Report the rate to client here\n    // Note: This is currently only used with QuickPulse client\n    private _trackDependencyRate() {\n        if (this._enableLiveMetricsCounters) {\n            var lastDependencies = this._lastDependencies;\n            var dependencies = {\n                totalDependencyCount: AutoCollectPerformance._totalDependencyCount,\n                totalFailedDependencyCount: AutoCollectPerformance._totalFailedDependencyCount,\n                time: +new Date\n            };\n\n            var intervalDependencies = (dependencies.totalDependencyCount - lastDependencies.totalDependencyCount) || 0;\n            var intervalFailedDependencies = (dependencies.totalFailedDependencyCount - lastDependencies.totalFailedDependencyCount) || 0;\n            var elapsedMs = dependencies.time - lastDependencies.time;\n            var elapsedSeconds = elapsedMs / 1000;\n            var averageDependencyExecutionTime = ((AutoCollectPerformance._intervalDependencyExecutionTime - this._lastIntervalDependencyExecutionTime) / intervalDependencies) || 0;\n            this._lastIntervalDependencyExecutionTime = AutoCollectPerformance._intervalDependencyExecutionTime // reset\n\n            if (elapsedMs > 0) {\n                var dependenciesPerSec = intervalDependencies / elapsedSeconds;\n                var failedDependenciesPerSec = intervalFailedDependencies / elapsedSeconds;\n\n                this._client.trackMetric({ name: Constants.QuickPulseCounter.DEPENDENCY_RATE, value: dependenciesPerSec });\n                this._client.trackMetric({ name: Constants.QuickPulseCounter.DEPENDENCY_FAILURE_RATE, value: failedDependenciesPerSec });\n\n                // redundant check for livemetrics, but kept for consistency w/ requests\n                // Only send duration to live metrics if it has been updated!\n                if (!this._enableLiveMetricsCounters || intervalDependencies > 0) {\n                    this._client.trackMetric({ name: Constants.QuickPulseCounter.DEPENDENCY_DURATION, value: averageDependencyExecutionTime });\n                }\n            }\n            this._lastDependencies = dependencies;\n        }\n    }\n\n    // Static counter is accumulated externally. Report the rate to client here\n    // Note: This is currently only used with QuickPulse client\n    private _trackExceptionRate() {\n        if (this._enableLiveMetricsCounters) {\n            var lastExceptions = this._lastExceptions;\n            var exceptions = {\n                totalExceptionCount: AutoCollectPerformance._totalExceptionCount,\n                time: +new Date\n            };\n\n            var intervalExceptions = (exceptions.totalExceptionCount - lastExceptions.totalExceptionCount) || 0;\n            var elapsedMs = exceptions.time - lastExceptions.time;\n            var elapsedSeconds = elapsedMs / 1000;\n\n            if (elapsedMs > 0) {\n                var exceptionsPerSec = intervalExceptions / elapsedSeconds;\n                this._client.trackMetric({ name: Constants.QuickPulseCounter.EXCEPTION_RATE, value: exceptionsPerSec });\n            }\n            this._lastExceptions = exceptions;\n        }\n    }\n\n    public dispose() {\n        AutoCollectPerformance.INSTANCE = null;\n        this.enable(false);\n        this._isInitialized = false;\n    }\n}\n\nexport = AutoCollectPerformance;\n"]}