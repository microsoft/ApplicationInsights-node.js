{"version":3,"file":"redis.sub.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/redis.sub.ts"],"names":[],"mappings":";;;AAGA,0DAAwE;AACxE,yDAAyE;AAIzE,IAAI,OAAO,GAAsB,EAAE,CAAC;AAE7B,IAAM,UAAU,GAAG,UAAC,KAAuC;IAC9D,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;QACnB,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,KAAK,MAAM,EAAE;YAC1C,kDAAkD;YAClD,OAAO;SACV;QACD,MAAM,CAAC,eAAe,CAClB;YACI,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO;YAC1B,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO;YACnC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO;YACnC,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ;YAC7B,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;YACxB,2CAA2C;YAC3C,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;YACtC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI;YACrB,kBAAkB,EAAE,OAAO;SAC9B,CAAC,CAAC;IAEX,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AApBW,QAAA,UAAU,cAoBrB;AAEF,SAAgB,MAAM,CAAC,OAAgB,EAAE,MAAuB;IAC5D,IAAI,OAAO,EAAE;QACT,IAAI,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QACjD,IAAI,WAAW,EAAE;YACb,OAAO;SACV;QACD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,SAAS,CAAmB,OAAO,EAAE,kBAAU,EAAE,+BAAU,EAAE,UAAC,MAAM,EAAE,OAAO;gBACjF,IAAI,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;gBACtC,IAAI,SAAS,EAAE;oBACX,SAAS,CAAC,kBAAkB,CAAC,oCAAwB,CAAC,KAAK,CAAC,CAAC;iBAChE;YACL,CAAC,CAAC,CAAC;SACN;QACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxB;SAAM;QACH,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QAC7C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,WAAW,CAAC,OAAO,EAAE,kBAAU,CAAC,CAAC;SAC5C;KACJ;AACL,CAAC;AArBD,wBAqBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport TelemetryClient = require(\"../../Library/TelemetryClient\");\r\nimport { StatsbeatInstrumentation } from \"../../Declarations/Constants\";\r\nimport { channel, IStandardEvent, trueFilter } from \"diagnostic-channel\";\r\n\r\nimport { redis } from \"diagnostic-channel-publishers\";\r\n\r\nlet clients: TelemetryClient[] = [];\r\n\r\nexport const subscriber = (event: IStandardEvent<redis.IRedisData>) => {\r\n    clients.forEach((client) => {\r\n        if (event.data.commandObj.command === \"info\") {\r\n            // We don't want to report 'info', it's irrelevant\r\n            return;\r\n        }\r\n        client.trackDependency(\r\n            {\r\n                target: event.data.address,\r\n                name: event.data.commandObj.command,\r\n                data: event.data.commandObj.command,\r\n                duration: event.data.duration,\r\n                success: !event.data.err,\r\n                /* TODO: transmit result code from redis */\r\n                resultCode: event.data.err ? \"1\" : \"0\",\r\n                time: event.data.time,\r\n                dependencyTypeName: \"redis\"\r\n            });\r\n\r\n    });\r\n};\r\n\r\nexport function enable(enabled: boolean, client: TelemetryClient) {\r\n    if (enabled) {\r\n        let clientFound = clients.find(c => c == client);\r\n        if (clientFound) {\r\n            return;\r\n        }\r\n        if (clients.length === 0) {\r\n            channel.subscribe<redis.IRedisData>(\"redis\", subscriber, trueFilter, (module, version) => {\r\n                let statsbeat = client.getStatsbeat();\r\n                if (statsbeat) {\r\n                    statsbeat.addInstrumentation(StatsbeatInstrumentation.REDIS);\r\n                }\r\n            });\r\n        }\r\n        clients.push(client);\r\n    } else {\r\n        clients = clients.filter((c) => c != client);\r\n        if (clients.length === 0) {\r\n            channel.unsubscribe(\"redis\", subscriber);\r\n        }\r\n    }\r\n}\r\n"]}