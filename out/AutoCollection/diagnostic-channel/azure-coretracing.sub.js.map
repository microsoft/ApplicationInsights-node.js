{"version":3,"file":"azure-coretracing.sub.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/azure-coretracing.sub.ts"],"names":[],"mappings":";;;AAGA,0CAA8C;AAG9C,0DAAwE;AACxE,yDAAyE;AAEzE,yCAA2C;AAC3C,oEAA8D;AAG9D,IAAI,OAAO,GAAsB,EAAE,CAAC;AAE7B,IAAM,UAAU,GAAG,UAAC,KAA2B;IAClD,IAAI;QACA,IAAM,MAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACxB,IAAM,WAAS,GAAG,UAAU,CAAC,uBAAuB,CAAC,MAAI,CAAC,CAAC;QAC3D,0CAAiB,CAAC,IAAI,CAAC,MAAI,EAAE;YACzB,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;gBACnB,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,MAAM,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,QAAQ,EAAE;oBAClE,MAAM,CAAC,YAAY,CAAmB,WAAS,CAAC,CAAC;iBACpD;qBAAM,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,MAAM,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,QAAQ,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,QAAQ,EAAE;oBAC5G,MAAM,CAAC,eAAe,CAAsB,WAAS,CAAC,CAAC;iBAC1D;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;KACN;IACD,OAAO,GAAG,EAAE;QAAE,EAAE,oBAAoB,EAAE;KAAE;AAC5C,CAAC,CAAC;AAfW,QAAA,UAAU,cAerB;AAEF,SAAgB,MAAM,CAAC,OAAgB,EAAE,MAAuB;IAC5D,IAAI,OAAO,EAAE;QACT,IAAI,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QACjD,IAAI,WAAW,EAAE;YACb,OAAO;SACV;QACD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,SAAS,CAAM,mBAAmB,EAAE,kBAAU,EAAE,+BAAU,EAAE,UAAC,MAAM,EAAE,OAAO;gBAChF,IAAI,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;gBACtC,IAAI,SAAS,EAAE;oBACX,SAAS,CAAC,kBAAkB,CAAC,oCAAwB,CAAC,kBAAkB,CAAC,CAAC;iBAC7E;YACL,CAAC,CAAC,CAAC;SAEN;QACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxB;SAAM;QACH,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QAC7C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,kBAAU,CAAC,CAAC;SACxD;KACJ;AACL,CAAC;AAtBD,wBAsBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\nimport { Span } from \"@opentelemetry/sdk-trace-base\";\nimport { SpanKind } from \"@opentelemetry/api\";\n\nimport TelemetryClient = require(\"../../Library/TelemetryClient\");\nimport { StatsbeatInstrumentation } from \"../../Declarations/Constants\";\nimport { channel, IStandardEvent, trueFilter } from \"diagnostic-channel\";\n\nimport * as SpanParser from \"./SpanParser\";\nimport { AsyncScopeManager } from \"../AsyncHooksScopeManager\";\nimport { DependencyTelemetry, RequestTelemetry } from \"../../Declarations/Contracts\";\n\nlet clients: TelemetryClient[] = [];\n\nexport const subscriber = (event: IStandardEvent<Span>) => {\n    try {\n        const span = event.data;\n        const telemetry = SpanParser.spanToTelemetryContract(span);\n        AsyncScopeManager.with(span, () => {\n            clients.forEach((client) => {\n                if (span.kind === SpanKind.SERVER || span.kind === SpanKind.CONSUMER) {\n                    client.trackRequest(<RequestTelemetry>telemetry);\n                } else if (span.kind === SpanKind.CLIENT || span.kind === SpanKind.INTERNAL || span.kind === SpanKind.PRODUCER) {\n                    client.trackDependency(<DependencyTelemetry>telemetry);\n                }\n            });\n        });\n    }\n    catch (err) { { /** ignore errors */ } }\n};\n\nexport function enable(enabled: boolean, client: TelemetryClient) {\n    if (enabled) {\n        let clientFound = clients.find(c => c == client);\n        if (clientFound) {\n            return;\n        }\n        if (clients.length === 0) {\n            channel.subscribe<any>(\"azure-coretracing\", subscriber, trueFilter, (module, version) => {\n                let statsbeat = client.getStatsbeat();\n                if (statsbeat) {\n                    statsbeat.addInstrumentation(StatsbeatInstrumentation.AZURE_CORE_TRACING);\n                }\n            });\n\n        }\n        clients.push(client);\n    } else {\n        clients = clients.filter((c) => c != client);\n        if (clients.length === 0) {\n            channel.unsubscribe(\"azure-coretracing\", subscriber);\n        }\n    }\n}\n"]}