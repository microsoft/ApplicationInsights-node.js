{"version":3,"file":"HttpRequestParser.js","sourceRoot":"","sources":["../../AutoCollection/HttpRequestParser.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\nimport url = require(\"url\");\nimport net = require(\"net\");\n\nimport Contracts = require(\"../Declarations/Contracts\");\nimport Util = require(\"../Library/Util\");\nimport RequestResponseHeaders = require(\"../Library/RequestResponseHeaders\");\nimport RequestParser = require(\"./RequestParser\");\nimport CorrelationIdManager = require(\"../Library/CorrelationIdManager\");\nimport Tracestate = require(\"../Library/Tracestate\");\nimport Traceparent = require(\"../Library/Traceparent\");\nimport { HttpRequest } from \"../Library/Functions\";\n\n\n/**\n * Helper class to read data from the request/response objects and convert them into the telemetry contract\n */\nclass HttpRequestParser extends RequestParser {\n    private static keys = new Contracts.ContextTagKeys();\n\n    private rawHeaders: { [key: string]: string };\n    private socketRemoteAddress: string;\n    private connectionRemoteAddress: string;\n    private legacySocketRemoteAddress: string;\n    private userAgent: string;\n    private sourceCorrelationId: string;\n    private parentId: string;\n    private operationId: string;\n    private requestId: string;\n    private traceparent: Traceparent;\n    private tracestate: Tracestate;\n    private legacyRootId: string; // if original operationId is not w3c compat, move it here\n\n    private correlationContextHeader: string;\n\n    constructor(request: http.IncomingMessage | HttpRequest, requestId?: string) {\n        super();\n        if (request) {\n            this.method = request.method;\n            this.url = this._getAbsoluteUrl(request);\n            this.startTime = +new Date();\n            this.socketRemoteAddress = (<any>request).socket && (<any>request).socket.remoteAddress;\n            this.parseHeaders(request, requestId);\n            if ((<any>request).connection) {\n                this.connectionRemoteAddress = ((<any>request).connection as net.Socket).remoteAddress;\n                this.legacySocketRemoteAddress = (<any>(<any>request).connection)[\"socket\"] && (<any>(<any>request).connection)[\"socket\"].remoteAddress;\n            }\n        }\n    }\n\n    public onError(error: Error | string, ellapsedMilliseconds?: number) {\n        this._setStatus(undefined, error);\n\n        // This parameter is only for overrides. setStatus handles this internally for the autocollected case\n        if (ellapsedMilliseconds) {\n            this.duration = ellapsedMilliseconds;\n        }\n    }\n\n    public onResponse(response: http.ServerResponse, ellapsedMilliseconds?: number) {\n        this._setStatus(response.statusCode, undefined);\n\n        // This parameter is only for overrides. setStatus handles this internally for the autocollected case\n        if (ellapsedMilliseconds) {\n            this.duration = ellapsedMilliseconds;\n        }\n    }\n\n    public getRequestTelemetry(baseTelemetry?: Contracts.Telemetry): Contracts.RequestTelemetry {\n\n        let name = this.method;\n        try {\n            name += \" \" + new url.URL(this.url).pathname;\n        }\n        catch (ex) { // Invalid URL\n            // Ignore error\n        }\n\n        var requestTelemetry: Contracts.RequestTelemetry & Contracts.Identified = {\n            id: this.requestId,\n            name: name,\n            url: this.url,\n            /*\n            See https://github.com/microsoft/ApplicationInsights-dotnet-server/blob/25d695e6a906fbe977f67be3966d25dbf1c50a79/Src/Web/Web.Shared.Net/RequestTrackingTelemetryModule.cs#L250\n            for reference\n            */\n            source: this.sourceCorrelationId,\n            duration: this.duration,\n            resultCode: this.statusCode ? this.statusCode.toString() : null,\n            success: this._isSuccess(),\n            properties: this.properties\n        };\n\n        if (baseTelemetry && baseTelemetry.time) {\n            requestTelemetry.time = baseTelemetry.time;\n        } else if (this.startTime) {\n            requestTelemetry.time = new Date(this.startTime);\n        }\n\n        // We should keep any parameters the user passed in\n        // Except the fields defined above in requestTelemetry, which take priority\n        // Except the properties field, where they're merged instead, with baseTelemetry taking priority\n        if (baseTelemetry) {\n            // Copy missing fields\n            for (let key in baseTelemetry) {\n                if (!(<any>requestTelemetry)[key]) {\n                    (<any>requestTelemetry)[key] = (<any>baseTelemetry)[key];\n                }\n            }\n            // Merge properties\n            if (baseTelemetry.properties) {\n                for (let key in baseTelemetry.properties) {\n                    requestTelemetry.properties[key] = baseTelemetry.properties[key];\n                }\n            }\n        }\n\n        return requestTelemetry;\n    }\n\n    public getRequestTags(tags: { [key: string]: string }): { [key: string]: string } {\n        // create a copy of the context for requests since client info will be used here\n        var newTags = <{ [key: string]: string }>{};\n        for (var key in tags) {\n            newTags[key] = tags[key];\n        }\n\n        // don't override tags if they are already set\n        newTags[HttpRequestParser.keys.locationIp] = tags[HttpRequestParser.keys.locationIp] || this._getIp();\n        newTags[HttpRequestParser.keys.sessionId] = tags[HttpRequestParser.keys.sessionId] || this._getId(\"ai_session\");\n        newTags[HttpRequestParser.keys.userId] = tags[HttpRequestParser.keys.userId] || this._getId(\"ai_user\");\n        newTags[HttpRequestParser.keys.userAuthUserId] = tags[HttpRequestParser.keys.userAuthUserId] || this._getId(\"ai_authUser\");\n        newTags[HttpRequestParser.keys.operationName] = this.getOperationName(tags);\n        newTags[HttpRequestParser.keys.operationParentId] = this.getOperationParentId(tags);\n        newTags[HttpRequestParser.keys.operationId] = this.getOperationId(tags);\n\n        return newTags;\n    }\n\n    public getOperationId(tags: { [key: string]: string }) {\n        return tags[HttpRequestParser.keys.operationId] || this.operationId;\n    }\n\n    public getOperationParentId(tags: { [key: string]: string }) {\n        return tags[HttpRequestParser.keys.operationParentId] || this.parentId || this.getOperationId(tags);\n    }\n\n    public getOperationName(tags: { [key: string]: string }) {\n        if (tags[HttpRequestParser.keys.operationName]) {\n            return tags[HttpRequestParser.keys.operationName];\n        }\n        let pathName = \"\";\n        try {\n            pathName = new url.URL(this.url).pathname;\n        }\n        catch (ex) { // Invalid URL\n            // Ignore error\n        }\n        let operationName = this.method;\n        if (pathName) {\n            operationName += \" \" + pathName;\n        }\n        return operationName;\n    }\n\n    public getRequestId() {\n        return this.requestId;\n    }\n\n    public getCorrelationContextHeader() {\n        return this.correlationContextHeader;\n    }\n\n    public getTraceparent() {\n        return this.traceparent;\n    }\n\n    public getTracestate() {\n        return this.tracestate;\n    }\n\n    public getLegacyRootId() {\n        return this.legacyRootId;\n    }\n\n    private _getAbsoluteUrl(request: http.IncomingMessage | HttpRequest): string {\n        if (!request.headers) {\n            return request.url;\n        }\n\n        var encrypted = (<any>request).connection ? ((<any>request).connection as any).encrypted : null;\n\n        var protocol = (encrypted || request.headers[\"x-forwarded-proto\"] == \"https\") ? \"https\" : \"http\";\n\n        var baseUrl = protocol + \"://\" + request.headers.host + \"/\";\n\n        var pathName = \"\";\n        var search = \"\";\n        try {\n            var requestUrl = new url.URL(request.url, baseUrl);\n            pathName = requestUrl.pathname;\n            search = requestUrl.search;\n        }\n        catch (ex) {\n            // Ignore errors\n        }\n        var absoluteUrl = url.format({\n            protocol: protocol,\n            host: request.headers.host,\n            pathname: pathName,\n            search: search\n        });\n        return absoluteUrl;\n    }\n\n    private _getIp() {\n\n        // regex to match ipv4 without port\n        // Note: including the port would cause the payload to be rejected by the data collector\n        var ipMatch = /[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/;\n\n        var check = (str: string): string => {\n            var results = ipMatch.exec(str);\n            if (results) {\n                return results[0];\n            }\n        };\n\n        var ip = check(this.rawHeaders[\"x-forwarded-for\"])\n            || check(this.rawHeaders[\"x-client-ip\"])\n            || check(this.rawHeaders[\"x-real-ip\"])\n            || check(this.connectionRemoteAddress)\n            || check(this.socketRemoteAddress)\n            || check(this.legacySocketRemoteAddress);\n\n        // node v12 returns this if the address is \"localhost\"\n        if (!ip\n            && this.connectionRemoteAddress\n            && this.connectionRemoteAddress.substr\n            && this.connectionRemoteAddress.substr(0, 2) === \"::\") {\n            ip = \"127.0.0.1\";\n        }\n\n        return ip;\n    }\n\n    private _getId(name: string) {\n        var cookie = (this.rawHeaders && this.rawHeaders[\"cookie\"] &&\n            typeof this.rawHeaders[\"cookie\"] === \"string\" && this.rawHeaders[\"cookie\"]) || \"\";\n        var value = HttpRequestParser.parseId(Util.getCookie(name, cookie));\n        return value;\n    }\n\n    /**\n     * Sets this operation's operationId, parentId, requestId (and legacyRootId, if necessary) based on this operation's traceparent\n     */\n    private setBackCompatFromThisTraceContext() {\n        // Set operationId\n        this.operationId = this.traceparent.traceId;\n        if (this.traceparent.legacyRootId) {\n            this.legacyRootId = this.traceparent.legacyRootId;\n        }\n\n        // Set parentId with existing spanId\n        this.parentId = this.traceparent.parentId;\n\n        // Update the spanId and set the current requestId\n        this.traceparent.updateSpanId();\n        this.requestId = this.traceparent.getBackCompatRequestId();\n    }\n\n    private parseHeaders(request: http.IncomingMessage | HttpRequest, requestId?: string) {\n\n        this.rawHeaders = request.headers || (<any>request).rawHeaders;\n        this.userAgent = request.headers && request.headers[\"user-agent\"];\n        this.sourceCorrelationId = Util.getCorrelationContextTarget(request, RequestResponseHeaders.requestContextSourceKey);\n\n        if (request.headers) {\n            const tracestateHeader = request.headers[RequestResponseHeaders.traceStateHeader] ? request.headers[RequestResponseHeaders.traceStateHeader].toString() : null; // w3c header\n            const traceparentHeader = request.headers[RequestResponseHeaders.traceparentHeader] ? request.headers[RequestResponseHeaders.traceparentHeader].toString() : null; // w3c header\n            const requestIdHeader = request.headers[RequestResponseHeaders.requestIdHeader] ? request.headers[RequestResponseHeaders.requestIdHeader].toString() : null; // default AI header\n            const legacy_parentId = request.headers[RequestResponseHeaders.parentIdHeader] ? request.headers[RequestResponseHeaders.parentIdHeader].toString() : null; // legacy AI header\n            const legacy_rootId = request.headers[RequestResponseHeaders.rootIdHeader] ? request.headers[RequestResponseHeaders.rootIdHeader].toString() : null; // legacy AI header\n\n            this.correlationContextHeader = request.headers[RequestResponseHeaders.correlationContextHeader] ? request.headers[RequestResponseHeaders.correlationContextHeader].toString() : null;\n\n            if (CorrelationIdManager.w3cEnabled && (traceparentHeader || tracestateHeader)) {\n                // Parse W3C Trace Context headers\n                this.traceparent = new Traceparent(traceparentHeader ? traceparentHeader.toString() : null); // new traceparent is always created from this\n                this.tracestate = traceparentHeader && tracestateHeader && new Tracestate(tracestateHeader ? tracestateHeader.toString() : null); // discard tracestate if no traceparent is present\n                this.setBackCompatFromThisTraceContext();\n            } else if (requestIdHeader) {\n                // Parse AI headers\n                if (CorrelationIdManager.w3cEnabled) {\n                    this.traceparent = new Traceparent(null, requestIdHeader);\n                    this.setBackCompatFromThisTraceContext();\n                } else {\n                    this.parentId = requestIdHeader;\n                    this.requestId = CorrelationIdManager.generateRequestId(this.parentId);\n                    this.operationId = CorrelationIdManager.getRootId(this.requestId);\n                }\n            } else {\n                // Legacy fallback\n                if (CorrelationIdManager.w3cEnabled) {\n                    this.traceparent = new Traceparent();\n                    this.traceparent.parentId = legacy_parentId;\n                    this.traceparent.legacyRootId = legacy_rootId || legacy_parentId;\n                    this.setBackCompatFromThisTraceContext();\n                } else {\n                    this.parentId = legacy_parentId;\n                    this.requestId = CorrelationIdManager.generateRequestId(legacy_rootId || this.parentId);\n                    this.correlationContextHeader = null;\n                    this.operationId = CorrelationIdManager.getRootId(this.requestId);\n                }\n            }\n\n            if (requestId) {\n                // For the scenarios that don't guarantee an AI-created context,\n                // override the requestId with the provided one.\n                this.requestId = requestId;\n                this.operationId = CorrelationIdManager.getRootId(this.requestId);\n            }\n        }\n    }\n\n    public static parseId(cookieValue: string): string {\n        const cookieParts = cookieValue.split(\"|\");\n\n        if (cookieParts.length > 0) {\n            return cookieParts[0];\n        }\n\n        return \"\"; // old behavior was to return \"\" for incorrect parsing\n    }\n}\n\nexport = HttpRequestParser;\n"]}