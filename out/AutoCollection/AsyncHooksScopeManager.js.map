{"version":3,"file":"AsyncHooksScopeManager.js","sourceRoot":"","sources":["../../AutoCollection/AsyncHooksScopeManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,yEAA2F;AAC3F,iCAAsC;AAEtC;IAAA;IAmEA,CAAC;IAhEU,iDAAM,GAAb;QAAA,iBAkBC;QAjBG,IAAM,OAAO,GAAG,qDAAyB,CAAC,iBAAiB,EAAS,CAAC;QACrE,6BACO,OAAO,KACV,QAAQ,EAAE,UAAC,GAAW;gBAClB,wDAAwD;gBACxD,IAAI,CAAC,KAAI,CAAC,aAAa,EAAE;oBACrB,KAAI,CAAC,aAAa,GAAG,GAAG,CAAC;oBACzB,OAAO,OAAO,CAAC;iBAClB;gBAED,IAAI,GAAG,KAAK,KAAI,CAAC,aAAa,EAAE;oBAC5B,OAAO,OAAO,CAAC;iBAClB;gBACD,OAAO,KAAK,CAAC;YACjB,CAAC,EACD,QAAQ,EAAE,cAAQ,CAAC,IACrB;IACN,CAAC;IAEM,+CAAI,GAAX,UAAY,IAAU,EAAE,EAAa;QACjC,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAM,kBAAkB,GAAG,gCAAgC,CAAC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;QACrG,OAAO,qDAAyB,CAAC,cAAc,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAE,CAAC;IAC9E,CAAC;IAEM,+CAAI,GAAX,UAAe,MAAS;QACpB,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YAC9B,OAAO,qDAAyB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SACzD;aAAM,IAAI,MAAM,YAAY,qBAAY,EAAE;YACvC,qDAAyB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SACjD;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,iDAAM,GAAb;QACI,qDAAyB,CAAC,MAAM,EAAE,CAAC;QACnC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,kDAAO,GAAd;QACI,qDAAyB,CAAC,OAAO,EAAE,CAAC;QACpC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEc,+CAAc,GAA7B,UAA8B,IAAU,EAAE,YAAqB,EAAE,IAAa;QAC1E,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAO,IAAK,CAAC,OAAO,EAAE,CAAC,CAAC,0CAA0C;QAC7H,IAAM,OAAO,yBACN,IAAI,CAAC,WAAW,EAAE,KACrB,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,GAC5C,CAAC;QACF,IAAI,QAAQ,GAAG,YAAY,CAAC,CAAC,CAAC,MAAI,WAAW,CAAC,OAAO,SAAI,YAAY,MAAG,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC;QAC/F,IAAM,SAAS,GAAG,qDAAyB,CAAC,iBAAiB,EAAE,CAAC;QAChE,IAAI,SAAS,EAAE;YACX,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;YACzC,gDAAgD;YAChD,IAAI,CAAC,YAAY,EAAE;gBACf,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC;aAC3C;SACJ;QACD,IAAM,kBAAkB,GAAG,qDAAyB,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAA;QACjG,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IACL,uCAAC;AAAD,CAAC,AAnED,IAmEC;AAnEY,4EAAgC;AAqEhC,QAAA,iBAAiB,GAAG,IAAI,gCAAgC,EAAE,CAAC","sourcesContent":["import { SpanContext } from \"@opentelemetry/api\";\nimport { Span } from \"@opentelemetry/sdk-trace-base\";\n\nimport { CorrelationContextManager, CorrelationContext } from \"./CorrelationContextManager\"\nimport { EventEmitter } from \"events\";\n\nexport class OpenTelemetryScopeManagerWrapper {\n    private _activeSymbol: symbol | undefined;\n\n    public active() {\n        const context = CorrelationContextManager.getCurrentContext() as any;\n        return {\n            ...context,\n            getValue: (key: symbol) => {\n                // todo: lazy import activeSymbol from opentelemetry/api\n                if (!this._activeSymbol) {\n                    this._activeSymbol = key;\n                    return context;\n                }\n\n                if (key === this._activeSymbol) {\n                    return context;\n                }\n                return false;\n            },\n            setValue: () => { }\n        };\n    }\n\n    public with(span: Span, fn: () => any) {\n        const parentSpanId = span.parentSpanId;\n        const name = span.name;\n        const correlationContext = OpenTelemetryScopeManagerWrapper._spanToContext(span, parentSpanId, name);\n        return CorrelationContextManager.runWithContext(correlationContext, fn)();\n    }\n\n    public bind<T>(target: T): T {\n        if (typeof target === \"function\") {\n            return CorrelationContextManager.wrapCallback(target);\n        } else if (target instanceof EventEmitter) {\n            CorrelationContextManager.wrapEmitter(target);\n        }\n        return target;\n    }\n\n    public enable(): this {\n        CorrelationContextManager.enable();\n        return this;\n    }\n\n    public disable(): this {\n        CorrelationContextManager.disable();\n        return this;\n    }\n\n    private static _spanToContext(span: Span, parentSpanId?: string, name?: string): CorrelationContext {\n        const spanContext = span.spanContext ? span.spanContext() : (<any>span).context(); // context is available in OT API <v0.19.0\n        const context: SpanContext = {\n            ...span.spanContext(),\n            traceFlags: span.spanContext().traceFlags\n        };\n        let parentId = parentSpanId ? `|${spanContext.traceId}.${parentSpanId}.` : spanContext.traceId;\n        const aiContext = CorrelationContextManager.getCurrentContext();\n        if (aiContext) {\n            context.traceId = aiContext.operation.id;\n            // If parent is no available use current context\n            if (!parentSpanId) {\n                parentId = aiContext.operation.parentId;\n            }\n        }\n        const correlationContext = CorrelationContextManager.spanToContextObject(context, parentId, name)\n        return correlationContext;\n    }\n}\n\nexport const AsyncScopeManager = new OpenTelemetryScopeManagerWrapper();\n"]}