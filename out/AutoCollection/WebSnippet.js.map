{"version":3,"file":"WebSnippet.js","sourceRoot":"","sources":["../../AutoCollection/WebSnippet.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\nimport https = require(\"https\");\nimport zlib = require(\"zlib\");\n\nimport Logging = require(\"../Library/Logging\");\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\nimport snippetInjectionHelper = require(\"../Library/SnippetInjectionHelper\");\nimport prefixHelper = require(\"../Library/PrefixHelper\");\nimport Statsbeat = require(\"./Statsbeat\");\nimport Constants = require(\"../Declarations/Constants\");\nimport ConnectionStringParser = require(\"../Library/ConnectionStringParser\");\nimport {webSnippet} from \"@microsoft/applicationinsights-web-snippet\";\nimport {IWebInstrumentationConfig} from \"../Declarations/Interfaces\";\n\n\nclass WebSnippet {\n\n    public static INSTANCE: WebSnippet;\n\n    private static _snippet: string;\n    private static _aiUrl: string;\n    private static _aiDeprecatedUrl: string;\n    private _isEnabled: boolean;\n    private _isInitialized: boolean;\n    private _isIkeyValid: boolean = true;\n    private _statsbeat: Statsbeat;\n    private _webInstrumentationIkey: string;\n    private _clientWebInstrumentationConfig: IWebInstrumentationConfig[];\n    private _clientWebInstrumentationSrc: string;\n\n    constructor(client: TelemetryClient) {\n        if (!!WebSnippet.INSTANCE) {\n            throw new Error(\"Web snippet injection should be configured from the applicationInsights object\");\n        }\n\n        WebSnippet.INSTANCE = this;\n        // AI URL used to validate if snippet already included\n        WebSnippet._aiUrl = Constants.WEB_INSTRUMENTATION_DEFAULT_SOURCE;\n        WebSnippet._aiDeprecatedUrl = Constants.WEB_INSTRUMENTATION_DEPRECATED_SOURCE;\n\n        let clientWebIkey = this._getWebSnippetIkey(client.config?.webInstrumentationConnectionString);\n        this._webInstrumentationIkey = clientWebIkey || client.config.instrumentationKey;\n        this._clientWebInstrumentationConfig = client.config.webInstrumentationConfig;\n        this._clientWebInstrumentationSrc = client.config.webInstrumentationSrc;\n\n        this._statsbeat = client.getStatsbeat();\n    }\n\n    public enable(isEnabled: boolean, webInstrumentationConnectionString?: string ) {\n        this._isEnabled = isEnabled;\n        this._webInstrumentationIkey = this._getWebSnippetIkey(webInstrumentationConnectionString) || this._webInstrumentationIkey;\n        WebSnippet._snippet = this._getWebInstrumentationReplacedStr();\n\n        if (this._isEnabled && !this._isInitialized && this._isIkeyValid) {\n            if (this._statsbeat) {\n                this._statsbeat.addFeature(Constants.StatsbeatFeature.WEB_SNIPPET);\n            }\n            this._initialize();\n        } else if (!this._isEnabled) {\n            if (this._statsbeat) {\n                this._statsbeat.removeFeature(Constants.StatsbeatFeature.WEB_SNIPPET);\n            }\n        }\n    }\n\n    public isInitialized() {\n        return this._isInitialized;\n    }\n\n    private _getWebSnippetIkey(connectionString: string) {\n        let iKey = null;\n        try {\n            const csCode = ConnectionStringParser.parse(connectionString);\n            const iKeyCode = csCode.instrumentationkey || \"\";\n            if (!ConnectionStringParser.isIkeyValid(iKeyCode)) {\n                this._isIkeyValid = false;\n                Logging.info(\"Invalid web Instrumentation connection string, web Instrumentation is not enabled.\");\n            } else {\n                this._isIkeyValid = true;\n                iKey = iKeyCode;\n            }\n        } catch (err) {\n            Logging.info(\"get web snippet ikey error: \" + err);\n        }\n        return iKey;\n    }\n\n    private _getWebInstrumentationReplacedStr() {\n        let configStr = this._getClientWebInstrumentationConfigStr(this._clientWebInstrumentationConfig);\n        let osStr = prefixHelper.getOsPrefix();\n        let rpStr = prefixHelper.getResourceProvider();\n        let snippetReplacedStr = `${this._webInstrumentationIkey}\\\",\\r\\n${configStr} disableIkeyDeprecationMessage: true,\\r\\n sdkExtension: \\\"${rpStr}${osStr}d_n_`;\n        let replacedSnippet = webSnippet.replace(\"INSTRUMENTATION_KEY\", snippetReplacedStr);\n        if (this._clientWebInstrumentationSrc) {\n            return replacedSnippet.replace(`${Constants.WEB_INSTRUMENTATION_DEFAULT_SOURCE}.2.min.js`,this._clientWebInstrumentationSrc);\n        }\n        return replacedSnippet;\n    }\n\n    // Do not use string replace here, because double quote should be kept.\n    // we want to transfer all values of config to the web snippet in the following way:\n    // cfg: {\n    //      config1: \"config1 string value\",\n    //      config2: true,\n    //      config3: 1,\n    //      ...\n    //}});\n    private _getClientWebInstrumentationConfigStr(config: IWebInstrumentationConfig[]) {\n        let configStr = \"\";\n        try {\n            if (config != undefined && config.length > 0) {\n                config.forEach((item) =>{\n                    let key = item.name;\n                    if (key === undefined) return;\n                    let val = item.value;\n                    let entry = \"\";\n                    // NOTE: users should convert object/function to string themselves\n                    // Type \"function\" and \"object\" will be skipped!\n                    switch(typeof val) {\n                        case \"function\":\n                            break;\n                        case \"object\":\n                            break;\n                        case \"string\":\n                            entry = ` ${key}: \\\"${val}\\\",\\r\\n`;\n                            configStr += entry;\n                            break;\n                        default:\n                            entry = ` ${key}: ${val},\\r\\n`;\n                            configStr += entry;\n                            break;\n                    }\n                    \n                });\n            }\n\n        } catch (e) {\n            // if has any errors here, web Instrumentation will be disabled.\n            this._isEnabled = false;\n            Logging.info(\"Parse client web instrumentation error. Web Instrumentation is disabled\");\n        }\n        return configStr;\n    }\n\n    private _initialize() {\n        this._isInitialized = true;\n        const originalHttpServer = http.createServer;\n        const originalHttpsServer = https.createServer;\n        var isEnabled = this._isEnabled;\n\n        http.createServer = (requestListener?: (request: http.IncomingMessage, response: http.ServerResponse) => void) => {\n            const originalRequestListener = requestListener;\n            if (originalRequestListener) {\n                requestListener = (request: http.IncomingMessage, response: http.ServerResponse) => {\n                    // Patch response write method\n                    let originalResponseWrite = response.write;\n                    let isGetRequest = request.method == \"GET\";\n                    response.write = function wrap(a: Buffer | string, b?: Function | string, c?:  Function | string) {\n                        //only patch GET request\n                        try {\n                            if (isEnabled && isGetRequest) {\n                                let headers =  snippetInjectionHelper.getContentEncodingFromHeaders(response);\n                                let writeBufferType = undefined;\n                                if (typeof b === \"string\") {\n                                    writeBufferType = b;\n                                }\n                                if (headers === null || headers === undefined) {\n                                    if (WebSnippet.INSTANCE.ValidateInjection(response, a)) {\n                                        arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(response, a, undefined, writeBufferType);\n                                    }\n                                } else if (headers.length) {\n                                    let encodeType = headers[0];\n                                    arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(response, a, encodeType);\n                                }\n                            }\n                        } catch (err) {\n                            Logging.warn(\"Inject snippet error: \"+ err);\n                        }\n                        return originalResponseWrite.apply(response, arguments);\n                    }\n\n                    // Patch response end method for cases when HTML is added there\n                    let originalResponseEnd = response.end;\n\n                    response.end = function wrap(a?: Buffer | string | any, b?: Function | string, c?: Function) {\n                        if (isEnabled && isGetRequest) {\n                            try {\n                                if (isEnabled && isGetRequest) {\n                                    let headers =  snippetInjectionHelper.getContentEncodingFromHeaders(response);\n                                    let endBufferType = undefined;\n                                    if (typeof b === \"string\") {\n                                        endBufferType = b;\n                                    }\n                                    if (headers === null || headers === undefined) {\n                                        if (WebSnippet.INSTANCE.ValidateInjection(response, a)) {\n                                            arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(response, a, undefined, endBufferType);\n                                        }\n                                    } else if (headers.length) {\n                                        let encodeType = headers[0];\n                                        arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(response, a, encodeType);\n                                    }\n                                }\n                            } catch (err) {\n                                Logging.warn(\"Inject snipet error: \"+ err);\n                            }\n                        }\n                        return originalResponseEnd.apply(response, arguments);\n                    }\n\n                    return originalRequestListener(request, response);\n                }\n            }\n            return originalHttpServer(requestListener);\n        }\n\n        https.createServer = function(options,httpsRequestListener) {\n            const originalHttpsRequestListener = httpsRequestListener;\n            if (originalHttpsRequestListener) {\n                httpsRequestListener = function (req, res) {\n                    let isGetHttpsRequest = req.method == \"GET\";\n                    let originalHttpsResponseWrite = res.write;\n                    let originalHttpsResponseEnd = res.end;\n                    res.write = function wrap(a: Buffer | string | any, b?:Function | string, c?: Function) {\n                        try {\n                            if (isEnabled && isGetHttpsRequest) {\n                                let headers =  snippetInjectionHelper.getContentEncodingFromHeaders(res);\n                                let writeBufferType = undefined;\n                                if (typeof b === \"string\") {\n                                    writeBufferType = b;\n                                }\n                                if (headers === null || headers === undefined) {\n                                    if (WebSnippet.INSTANCE.ValidateInjection(res, a)) {\n                                        arguments[0] = this.InjectWebSnippet(res, a, undefined, writeBufferType);\n                                    }\n                                } else if (headers.length) {\n                                    let encodeType = headers[0];\n                                    arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(res, a, encodeType);\n                                }\n                            }\n                        } catch (err) {\n                            Logging.warn(\"Inject snippet error: \"+ err);\n                        }\n                        return originalHttpsResponseWrite.apply(res,arguments);\n                    }\n\n                    res.end = function wrap(a: Buffer | string | any, b?:Function | string, c?: Function) {\n                        try {\n                            if (isEnabled && isGetHttpsRequest) {\n                                let headers =  snippetInjectionHelper.getContentEncodingFromHeaders(res);\n                                let endBufferType = undefined;\n                                if (typeof b === \"string\") {\n                                    endBufferType = b;\n                                }\n                                if (headers === null || headers === undefined) {\n                                    if (WebSnippet.INSTANCE.ValidateInjection(res, a)) {\n                                        arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(res, a, undefined, endBufferType);\n                                    }\n                                } else if (headers.length) {\n                                    let encodeType = headers[0];\n                                    arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(res, a, encodeType);\n                                }\n                            }\n                        } catch (err) {\n                            Logging.warn(\"Inject snippet error: \"+ err);\n                        }\n                        return originalHttpsResponseEnd.apply(res,arguments);\n\n                    }\n                    return originalHttpsRequestListener(req,res);\n                }\n                return originalHttpsServer(options, httpsRequestListener);\n\n            }\n          \n        }\n\n    }\n\n    /**\n     * Validate response and try to inject Web snippet\n     */\n    public ValidateInjection(response: http.ServerResponse, input: string | Buffer): boolean {\n        try {\n            if (!response || !input || response.statusCode != 200) return false;\n            let isContentHtml =  snippetInjectionHelper.isContentTypeHeaderHtml(response);\n            if (!isContentHtml) return false;\n            let inputStr = input.slice().toString();\n            if (inputStr.indexOf(\"<head>\") >= 0 && inputStr.indexOf(\"</head>\") >= 0) {\n                // Check if snippet not already present looking for AI Web SDK URL\n                if (inputStr.indexOf(WebSnippet._aiUrl) < 0 && inputStr.indexOf(WebSnippet._aiDeprecatedUrl) < 0) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            Logging.info(\"validate injections error: \" + err);\n        }\n        return false;\n    }\n\n    /**\n     * Inject Web snippet\n     */\n    public InjectWebSnippet(response: http.ServerResponse, input: string | Buffer, encodeType?: snippetInjectionHelper.contentEncodingMethod, bufferEncodeType?: string ): string | Buffer {\n        try {\n            let isCompressedBuffer = !!encodeType;\n            if (!isCompressedBuffer) {\n                let html = input.toString();\n                let index = html.indexOf(\"</head>\");\n                if (index < 0) return input;\n\n                let newHtml = snippetInjectionHelper.insertSnippetByIndex(index,html,WebSnippet._snippet);\n                if (typeof input === \"string\") {\n                    response.removeHeader(\"Content-Length\");\n                    input = newHtml;\n                    response.setHeader(\"Content-Length\", Buffer.byteLength(input));\n                } else if (Buffer.isBuffer(input)) {\n                    let bufferType = bufferEncodeType? bufferEncodeType:\"utf8\";\n                    let isValidBufferType = snippetInjectionHelper.isBufferType(input, bufferType);\n                    if (isValidBufferType) {\n                        response.removeHeader(\"Content-Length\");\n                        let encodedString = Buffer.from(newHtml).toString(bufferType);\n                        input = Buffer.from(encodedString,bufferType);\n                        response.setHeader(\"Content-Length\", input.length);\n                    }\n                }\n            } else {\n                response.removeHeader(\"Content-Length\");\n                input = this._getInjectedCompressBuffer(response,input as Buffer,encodeType);\n                response.setHeader(\"Content-Length\", input.length);\n            }\n        }\n        catch (ex) {\n            Logging.warn(\"Failed to inject web snippet and change content-lenght headers. Exception:\" + ex);\n        }\n        return input;\n    }\n\n    //***********************\n    // should NOT use sync functions here. But currently cannot get async functions to work\n    // because reponse.write return boolean\n    // and also this function do not support partial compression as well\n    // need more investigation\n    private _getInjectedCompressBuffer(response: http.ServerResponse, input: Buffer, encodeType: snippetInjectionHelper.contentEncodingMethod): Buffer {\n        try {\n            switch (encodeType) {\n                case snippetInjectionHelper.contentEncodingMethod.GZIP:\n                    let gunzipBuffer = zlib.gunzipSync(input);\n                    if (this.ValidateInjection(response,gunzipBuffer)) {\n                        let injectedGunzipBuffer = this.InjectWebSnippet(response, gunzipBuffer);\n                        input = zlib.gzipSync(injectedGunzipBuffer);\n                     }\n                     break;\n                case snippetInjectionHelper.contentEncodingMethod.DEFLATE:\n                    let inflateBuffer = zlib.inflateSync(input);\n                    if (this.ValidateInjection(response,inflateBuffer)) {\n                        let injectedInflateBuffer = this.InjectWebSnippet(response, inflateBuffer);\n                        input = zlib.deflateSync(injectedInflateBuffer);\n                     }\n                     break;\n                case snippetInjectionHelper.contentEncodingMethod.BR:\n                    let BrotliDecompressSync = snippetInjectionHelper.getBrotliDecompressSync(zlib);\n                    let BrotliCompressSync = snippetInjectionHelper.getBrotliCompressSync(zlib);\n                    if (BrotliDecompressSync && BrotliCompressSync) {\n                        let decompressBuffer = BrotliDecompressSync(input);\n                        if (this.ValidateInjection(response,decompressBuffer)) {\n                            let injectedDecompressBuffer = this.InjectWebSnippet(response, decompressBuffer);\n                            input = BrotliCompressSync(injectedDecompressBuffer);\n                         }\n                         break;\n                    }\n            }\n\n        } catch (err) {\n            Logging.info(\"get web injection compress buffer error: \" + err);\n        }\n        \n        return input;\n    }\n\n    public dispose() {\n        WebSnippet.INSTANCE = null;\n        this.enable(false);\n        this._isInitialized = false;\n    }\n}\n\nexport = WebSnippet;\n"]}