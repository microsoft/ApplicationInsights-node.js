{"version":3,"file":"HttpDependencies.js","sourceRoot":"","sources":["../../AutoCollection/HttpDependencies.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\nimport https = require(\"https\");\nimport Contracts = require(\"../Declarations/Contracts\");\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\nimport Logging = require(\"../Library/Logging\");\nimport Util = require(\"../Library/Util\");\nimport RequestResponseHeaders = require(\"../Library/RequestResponseHeaders\");\nimport HttpDependencyParser = require(\"./HttpDependencyParser\");\nimport { CorrelationContextManager, PrivateCustomProperties } from \"./CorrelationContextManager\";\nimport Traceparent = require(\"../Library/Traceparent\");\nimport * as DiagChannel from \"./diagnostic-channel/initialization\";\nimport CorrelationIdManager = require(\"../Library/CorrelationIdManager\");\n\nclass AutoCollectHttpDependencies {\n    public static disableCollectionRequestOption = \"disableAppInsightsAutoCollection\";\n\n    public static INSTANCE: AutoCollectHttpDependencies;\n\n    private static requestNumber = 1;\n    private static alreadyAutoCollectedFlag = \"_appInsightsAutoCollected\";\n\n    private _client: TelemetryClient;\n    private _isEnabled: boolean;\n    private _isInitialized: boolean;\n\n    constructor(client: TelemetryClient) {\n        if (!!AutoCollectHttpDependencies.INSTANCE) {\n            throw new Error(\"Client request tracking should be configured from the applicationInsights object\");\n        }\n\n        AutoCollectHttpDependencies.INSTANCE = this;\n        this._client = client;\n    }\n\n    public enable(isEnabled: boolean) {\n        this._isEnabled = isEnabled;\n        if (this._isEnabled && !this._isInitialized) {\n            this._initialize();\n        }\n        if (DiagChannel.IsInitialized) {\n            require(\"./diagnostic-channel/azure-coretracing.sub\").enable(isEnabled, this._client);\n            require(\"./diagnostic-channel/mongodb.sub\").enable(isEnabled, this._client);\n            require(\"./diagnostic-channel/mysql.sub\").enable(isEnabled, this._client);\n            require(\"./diagnostic-channel/redis.sub\").enable(isEnabled, this._client);\n            require(\"./diagnostic-channel/postgres.sub\").enable(isEnabled, this._client);\n        }\n    }\n\n    public isInitialized() {\n        return this._isInitialized;\n    }\n\n    private _initialize() {\n        this._isInitialized = true;\n\n        const originalRequest = http.request;\n        const originalHttpsRequest = https.request;\n\n        const clientRequestPatch = (request: http.ClientRequest, options: string | URL | http.RequestOptions | https.RequestOptions) => {\n            try {\n                var shouldCollect = !(<any>options)[AutoCollectHttpDependencies.disableCollectionRequestOption] &&\n                    !(<any>request)[AutoCollectHttpDependencies.alreadyAutoCollectedFlag];\n\n                // If someone else patched traceparent headers onto this request\n                let userAgentHeader = null;\n\n                // Azure SDK special handling\n                if ((<any>options).headers) {\n                    userAgentHeader = (<any>options).headers[\"User-Agent\"] || (<any>options).headers[\"user-agent\"];\n                    if (userAgentHeader && userAgentHeader.toString().indexOf(\"azsdk-js\") !== -1) {\n                        shouldCollect = false;\n                    }\n                }\n\n                if (request && options && shouldCollect) {\n                    CorrelationContextManager.wrapEmitter(request);\n                    if (this._isEnabled) {\n                        // Mark as auto collected\n                        (<any>request)[AutoCollectHttpDependencies.alreadyAutoCollectedFlag] = true;\n\n                        // If there is no context create one, this apply when no request is triggering the dependency\n                        if (!CorrelationContextManager.getCurrentContext()) {\n                            // Create correlation context and wrap execution\n                            let operationId = null;\n                            if (CorrelationIdManager.w3cEnabled) {\n                                let traceparent = new Traceparent();\n                                operationId = traceparent.traceId;\n                            }\n                            else {\n                                let requestId = CorrelationIdManager.generateRequestId(null);\n                                operationId = CorrelationIdManager.getRootId(requestId);\n                            }\n                            let correlationContext = CorrelationContextManager.generateContextObject(operationId);\n                            CorrelationContextManager.runWithContext(correlationContext, () => {\n                                AutoCollectHttpDependencies.trackRequest(this._client, { options: options, request: request });\n                            });\n                        }\n                        else {\n                            AutoCollectHttpDependencies.trackRequest(this._client, { options: options, request: request });\n                        }\n                    }\n                }\n            }\n            catch (err) {\n                Logging.warn(\"Failed to generate dependency telemetry.\", Util.dumpObj(err));\n            }\n\n        };\n\n        // On node >= v0.11.12 and < 9.0 (excluding 8.9.0) https.request just calls http.request (with additional options).\n        // On node < 0.11.12, 8.9.0, and 9.0 > https.request is handled separately\n        // Patch both and leave a flag to not double-count on versions that just call through\n        // We add the flag to both http and https to protect against strange double collection in other scenarios\n        http.request = (options, ...requestArgs: any[]) => {\n            const request: http.ClientRequest = originalRequest.call(http, options, ...requestArgs);\n            clientRequestPatch(request, options);\n            return request;\n        };\n\n        https.request = (options, ...requestArgs: any[]) => {\n            const request: http.ClientRequest = originalHttpsRequest.call(https, options, ...requestArgs);\n            clientRequestPatch(request, options);\n            return request;\n        };\n\n        // Node 8 calls http.request from http.get using a local reference!\n        // We have to patch .get manually in this case and can't just assume request is enough\n        // We have to replace the entire method in this case. We can't call the original.\n        // This is because calling the original will give us no chance to set headers as it internally does .end().\n        http.get = (options, ...requestArgs: any[]) => {\n            const request: http.ClientRequest = http.request.call(http, options, ...requestArgs);\n            request.end();\n            return request;\n        };\n        https.get = (options, ...requestArgs: any[]) => {\n            const request: http.ClientRequest = https.request.call(https, options, ...requestArgs);\n            request.end();\n            return request;\n        };\n    }\n\n    /**\n     * Tracks an outgoing request. Because it may set headers this method must be called before\n     * writing content to or ending the request.\n     */\n    public static trackRequest(client: TelemetryClient, telemetry: Contracts.NodeHttpDependencyTelemetry) {\n        if (!telemetry.options || !telemetry.request || !client) {\n            Logging.info(\"AutoCollectHttpDependencies.trackRequest was called with invalid parameters: \", !telemetry.options, !telemetry.request, !client);\n            return;\n        }\n\n        let requestParser = new HttpDependencyParser(telemetry.options, telemetry.request);\n\n        const currentContext = CorrelationContextManager.getCurrentContext();\n        let uniqueRequestId: string;\n        let uniqueTraceparent: string;\n        if (currentContext && currentContext.operation && currentContext.operation.traceparent && Traceparent.isValidTraceId(currentContext.operation.traceparent.traceId)) {\n            currentContext.operation.traceparent.updateSpanId();\n            uniqueRequestId = currentContext.operation.traceparent.getBackCompatRequestId();\n        } else if (CorrelationIdManager.w3cEnabled) {\n            // Start an operation now so that we can include the w3c headers in the outgoing request\n            const traceparent = new Traceparent();\n            uniqueTraceparent = traceparent.toString();\n            uniqueRequestId = traceparent.getBackCompatRequestId();\n        } else {\n            uniqueRequestId = currentContext && currentContext.operation && (currentContext.operation.parentId + AutoCollectHttpDependencies.requestNumber++ + \".\");\n        }\n\n        // Add the source correlationId to the request headers, if a value was not already provided.\n        // The getHeader/setHeader methods aren't available on very old Node versions, and\n        // are not included in the v0.10 type declarations currently used. So check if the\n        // methods exist before invoking them.\n        if (Util.canIncludeCorrelationHeader(client, requestParser.getUrl()) && telemetry.request.getHeader && telemetry.request.setHeader) {\n            if (client.config && client.config.correlationId) {\n                // getHeader returns \"any\" type in newer versions of node. In basic scenarios, this will be <string | string[] | number>, but could be modified to anything else via middleware\n                const correlationHeader = <any>telemetry.request.getHeader(RequestResponseHeaders.requestContextHeader)\n                try {\n                    Util.safeIncludeCorrelationHeader(client, telemetry.request, correlationHeader);\n                } catch (err) {\n                    Logging.warn(\"Request-Context header could not be set. Correlation of requests may be lost\", err);\n                }\n\n                if (currentContext && currentContext.operation) {\n                    try {\n                        telemetry.request.setHeader(RequestResponseHeaders.requestIdHeader, uniqueRequestId);\n                        // Also set legacy headers\n                        if (!client.config.ignoreLegacyHeaders) {\n                            telemetry.request.setHeader(RequestResponseHeaders.parentIdHeader, currentContext.operation.id);\n                            telemetry.request.setHeader(RequestResponseHeaders.rootIdHeader, uniqueRequestId);\n                        }\n\n                        // Set W3C headers, if available\n                        if (uniqueTraceparent || currentContext.operation.traceparent) {\n                            telemetry.request.setHeader(RequestResponseHeaders.traceparentHeader, uniqueTraceparent || currentContext.operation.traceparent.toString());\n                        } else if (CorrelationIdManager.w3cEnabled) {\n                            // should never get here since we set uniqueTraceparent above for the w3cEnabled scenario\n                            const traceparent = new Traceparent().toString();\n                            telemetry.request.setHeader(RequestResponseHeaders.traceparentHeader, traceparent);\n                        }\n                        if (currentContext.operation.tracestate) {\n                            const tracestate = currentContext.operation.tracestate.toString();\n                            if (tracestate) {\n                                telemetry.request.setHeader(RequestResponseHeaders.traceStateHeader, tracestate);\n                            }\n                        }\n\n                        const correlationContextHeader = (<PrivateCustomProperties>currentContext.customProperties).serializeToHeader();\n                        if (correlationContextHeader) {\n                            telemetry.request.setHeader(RequestResponseHeaders.correlationContextHeader, correlationContextHeader);\n                        }\n                    } catch (err) {\n                        Logging.warn(\"Correlation headers could not be set. Correlation of requests may be lost.\", err);\n                    }\n                }\n            }\n        }\n\n        // Collect dependency telemetry about the request when it finishes.\n        if (telemetry.request.on) {\n            telemetry.request.on(\"response\", (response: http.ClientResponse) => {\n                if (telemetry.isProcessed) {\n                    return;\n                }\n                telemetry.isProcessed = true;\n                requestParser.onResponse(response);\n                var dependencyTelemetry = requestParser.getDependencyTelemetry(telemetry, uniqueRequestId);\n                dependencyTelemetry.contextObjects = dependencyTelemetry.contextObjects || {};\n                dependencyTelemetry.contextObjects[\"http.RequestOptions\"] = telemetry.options;\n                dependencyTelemetry.contextObjects[\"http.ClientRequest\"] = telemetry.request;\n                dependencyTelemetry.contextObjects[\"http.ClientResponse\"] = response;\n\n                client.trackDependency(dependencyTelemetry);\n            });\n            telemetry.request.on(\"error\", (error: Error) => {\n                if (telemetry.isProcessed) {\n                    return;\n                }\n                telemetry.isProcessed = true;\n                requestParser.onError(error);\n                var dependencyTelemetry = requestParser.getDependencyTelemetry(telemetry, uniqueRequestId);\n                dependencyTelemetry.contextObjects = dependencyTelemetry.contextObjects || {};\n                dependencyTelemetry.contextObjects[\"http.RequestOptions\"] = telemetry.options;\n                dependencyTelemetry.contextObjects[\"http.ClientRequest\"] = telemetry.request;\n                dependencyTelemetry.contextObjects[\"Error\"] = error;\n\n                client.trackDependency(dependencyTelemetry);\n            });\n            telemetry.request.on(\"abort\", () => {\n                if (telemetry.isProcessed) {\n                    return;\n                }\n                telemetry.isProcessed = true;\n                requestParser.onError(new Error(\"The request has been aborted and the network socket has closed.\"));\n                var dependencyTelemetry = requestParser.getDependencyTelemetry(telemetry, uniqueRequestId);\n                dependencyTelemetry.contextObjects = dependencyTelemetry.contextObjects || {};\n                dependencyTelemetry.contextObjects[\"http.RequestOptions\"] = telemetry.options;\n                dependencyTelemetry.contextObjects[\"http.ClientRequest\"] = telemetry.request;\n\n                client.trackDependency(dependencyTelemetry);\n            });\n        }\n    }\n\n    public dispose() {\n        AutoCollectHttpDependencies.INSTANCE = null;\n        this.enable(false);\n        this._isInitialized = false;\n    }\n}\n\nexport = AutoCollectHttpDependencies;\n"]}