{"version":3,"file":"PreAggregatedMetricsTelemetryProcessor.js","sourceRoot":"","sources":["../../TelemetryProcessors/PreAggregatedMetricsTelemetryProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import Contracts = require(\"../Declarations/Contracts\");\nimport AutoCollecPreAggregatedMetrics = require(\"../AutoCollection/PreAggregatedMetrics\");\nimport * as TelemetryType from \"../Declarations/Contracts\";\nimport {\n    MetricDependencyDimensions,\n    MetricExceptionDimensions,\n    MetricRequestDimensions,\n    MetricTraceDimensions\n} from \"../Declarations/Metrics/AggregatedMetricDimensions\";\nimport Context = require(\"../Library/Context\");\n\nexport function preAggregatedMetricsTelemetryProcessor(envelope: Contracts.EnvelopeTelemetry, context: Context): boolean {\n    if (AutoCollecPreAggregatedMetrics.isEnabled()) {\n        // Increment rate counters\n        switch (envelope.data.baseType) {\n            case TelemetryType.TelemetryTypeString.Exception:\n                const exceptionData: Contracts.ExceptionData = (envelope.data as any).baseData;\n                exceptionData.properties = {\n                    ...exceptionData.properties,\n                    \"_MS.ProcessedByMetricExtractors\": \"(Name:'Exceptions', Ver:'1.1')\"\n                };\n                let exceptionDimensions: MetricExceptionDimensions = {\n                    cloudRoleInstance: envelope.tags[context.keys.cloudRoleInstance],\n                    cloudRoleName: envelope.tags[context.keys.cloudRole]\n                };\n                AutoCollecPreAggregatedMetrics.countException(exceptionDimensions);\n                break;\n            case TelemetryType.TelemetryTypeString.Trace:\n                const traceData: Contracts.TraceTelemetry = (envelope.data as any).baseData;\n                traceData.properties = {\n                    ...traceData.properties,\n                    \"_MS.ProcessedByMetricExtractors\": \"(Name:'Traces', Ver:'1.1')\"\n                }\n                let traceDimensions: MetricTraceDimensions = {\n                    cloudRoleInstance: envelope.tags[context.keys.cloudRoleInstance],\n                    cloudRoleName: envelope.tags[context.keys.cloudRole],\n                    traceSeverityLevel: Contracts.SeverityLevel[traceData.severity]\n                };\n                AutoCollecPreAggregatedMetrics.countTrace(traceDimensions);\n                break;\n            case TelemetryType.TelemetryTypeString.Request:\n                const requestData: Contracts.RequestData = (envelope.data as any).baseData;\n                requestData.properties = {\n                    ...requestData.properties,\n                    \"_MS.ProcessedByMetricExtractors\": \"(Name:'Requests', Ver:'1.1')\"\n                }\n                let requestDimensions: MetricRequestDimensions = {\n                    cloudRoleInstance: envelope.tags[context.keys.cloudRoleInstance],\n                    cloudRoleName: envelope.tags[context.keys.cloudRole],\n                    operationSynthetic: envelope.tags[context.keys.operationSyntheticSource],\n                    requestSuccess: requestData.success,\n                    requestResultCode: requestData.responseCode\n                };\n                AutoCollecPreAggregatedMetrics.countRequest(requestData.duration, requestDimensions);\n                break;\n            case TelemetryType.TelemetryTypeString.Dependency:\n                const remoteDependencyData: Contracts.RemoteDependencyData = (envelope.data as any).baseData;\n                remoteDependencyData.properties = {\n                    ...remoteDependencyData.properties,\n                    \"_MS.ProcessedByMetricExtractors\": \"(Name:'Dependencies', Ver:'1.1')\"\n                }\n                let dependencyDimensions: MetricDependencyDimensions = {\n                    cloudRoleInstance: envelope.tags[context.keys.cloudRoleInstance],\n                    cloudRoleName: envelope.tags[context.keys.cloudRole],\n                    operationSynthetic: envelope.tags[context.keys.operationSyntheticSource],\n                    dependencySuccess: remoteDependencyData.success,\n                    dependencyType: remoteDependencyData.type,\n                    dependencyTarget: remoteDependencyData.target,\n                    dependencyResultCode: remoteDependencyData.resultCode\n                };\n                AutoCollecPreAggregatedMetrics.countDependency(remoteDependencyData.duration, dependencyDimensions);\n                break;\n        }\n    }\n    return true;\n}\n"]}