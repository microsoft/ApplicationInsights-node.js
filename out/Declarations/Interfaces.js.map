{"version":3,"file":"Interfaces.js","sourceRoot":"","sources":["../../Declarations/Interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import http = require(\"http\");\nimport https = require(\"https\");\nimport * as azureCoreAuth from \"@azure/core-auth\";\nimport { DistributedTracingModes } from \"../applicationinsights\";\nimport { IDisabledExtendedMetrics } from \"../AutoCollection/NativePerformance\";\n\n\nexport interface IBaseConfig {\n    /** Application Insights resource instrumentation key */\n    instrumentationKey: string;\n    /** The ingestion endpoint to send telemetry payloads to */\n    endpointUrl: string;\n    /** The maximum number of telemetry items to include in a payload to the ingestion endpoint (Default 250) */\n    maxBatchSize: number;\n    /** The maximum amount of time to wait for a payload to reach maxBatchSize (Default 15000) */\n    maxBatchIntervalMs: number;\n    /** A flag indicating if telemetry transmission is disabled (Default false) */\n    disableAppInsights: boolean;\n    /** The percentage of telemetry items tracked that should be transmitted (Default 100) */\n    samplingPercentage: number;\n    /** The time to wait before retrying to retrieve the id for cross-component correlation (Default 30000) */\n    correlationIdRetryIntervalMs: number;\n    /** A list of domains to exclude from cross-component header injection */\n    correlationHeaderExcludedDomains: string[];\n    /** A proxy server for SDK HTTP traffic (Optional, Default pulled from `http_proxy` environment variable) */\n    proxyHttpUrl: string;\n    /** A proxy server for SDK HTTPS traffic (Optional, Default pulled from `https_proxy` environment variable) */\n    proxyHttpsUrl: string;\n    /** Disable including legacy headers in outgoing requests, x-ms-request-id */\n    ignoreLegacyHeaders: boolean;\n    /**\n     * Sets the distributed tracing modes. If W3C mode is enabled, W3C trace context\n     * headers (traceparent/tracestate) will be parsed in all incoming requests, and included in outgoing\n     * requests. In W3C mode, existing back-compatibility AI headers will also be parsed and included.\n     * Enabling W3C mode will not break existing correlation with other Application Insights instrumented\n     * services. Default=AI\n    */\n    distributedTracingMode: DistributedTracingModes;\n    /**\n     * Sets the state of console\n     * if true logger activity will be sent to Application Insights\n     */\n    enableAutoCollectExternalLoggers: boolean;\n    /**\n     * Sets the state of logger tracking (enabled by default for third-party loggers only)\n     * if true, logger autocollection will include console.log calls (default false)\n     */\n    enableAutoCollectConsole: boolean;\n    /**\n     * Sets the state of exception tracking (enabled by default)\n     * if true uncaught exceptions will be sent to Application Insights\n     */\n    enableAutoCollectExceptions: boolean;\n    /**\n     * Sets the state of performance tracking (enabled by default)\n     * if true performance counters will be collected every second and sent to Application Insights\n     */\n    enableAutoCollectPerformance: boolean;\n    /**\n     * Sets the state of performance tracking (enabled by default)\n     * if true, extended metrics counters will be collected every minute and sent to Application Insights\n     */\n    enableAutoCollectExtendedMetrics: boolean | IDisabledExtendedMetrics;\n    /**\n     * Sets the state of pre aggregated metrics tracking (enabled by default)\n     * if true pre aggregated metrics will be collected every minute and sent to Application Insights\n     */\n    enableAutoCollectPreAggregatedMetrics: boolean;\n    /**\n     * Sets the state of request tracking (enabled by default)\n     * if true HeartBeat metric data will be collected every 15 minutes and sent to Application Insights\n     */\n    enableAutoCollectHeartbeat: boolean;\n    /**\n     * Sets the state of request tracking (enabled by default)\n     * if true requests will be sent to Application Insights\n     */\n    enableAutoCollectRequests: boolean;\n    /**\n     * Sets the state of dependency tracking (enabled by default)\n     * if true dependencies will be sent to Application Insights\n     */\n    enableAutoCollectDependencies: boolean;\n    /**\n     * Sets the state of automatic dependency correlation (enabled by default)\n     * if true dependencies will be correlated with requests\n     */\n    enableAutoDependencyCorrelation: boolean;\n    /**\n     * Sets the state of automatic dependency correlation (enabled by default)\n     * if true, forces use of experimental async_hooks module to provide correlation. If false, instead uses only patching-based techniques. If left blank, the best option is chosen for you based on your version of Node.js.\n     */\n    enableUseAsyncHooks: boolean;\n    /**\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\n     * Note that this method only applies to the default client. Disk-backed retry caching is disabled by default for additional clients.\n     * For enable for additional clients, use client.channel.setUseDiskRetryCaching(true).\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\n     * enableUseDiskRetryCaching if true events that occured while client is offline will be cached on disk\n     * enableResendInterval The wait interval for resending cached events.\n     * enableMaxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\n     */\n    enableUseDiskRetryCaching: boolean;\n    enableResendInterval: number;\n    enableMaxBytesOnDisk: number;\n    /**\n     * Enables debug and warning logging for AppInsights itself.\n     * if true, enables debug logging\n     */\n    enableInternalDebugLogging: boolean;\n    /**\n     * Enables debug and warning logging for AppInsights itself.\n     * if true, enables warning logging\n     */\n    enableInternalWarningLogging: boolean;\n    /**\n    * Enables communication with Application Insights Live Metrics.\n    * if true, enables communication with the live metrics service\n    */\n    enableSendLiveMetrics: boolean;\n    /**\n    * Disable all environment variables set\n    */\n    disableAllExtendedMetrics: boolean;\n    /**\n    * Disable individual environment variables set. eg. \"extendedMetricDisablers\": \"...\"\n    */\n    extendedMetricDisablers: string;\n    /**\n    * Disable Statsbeat\n    */\n    disableStatsbeat: boolean;\n    /**\n    * Live Metrics custom host\n    */\n    quickPulseHost: string;\n    /**\n     * @deprecated, please use enableWebInstrumentation instead\n     * Enable web snippet auto html injection, default to false, this config is NOT exposed in documentation after version 2.3.5\n     */\n    enableAutoWebSnippetInjection?: boolean;\n    /**\n     * @deprecated, Please use webInstrumentationConnectionString instead\n     * Application Insights resource connection string for web snippet, this config is NOT exposed in documentation after version 2.3.5\n     * Note: if no valid connection string is provided here, web snippet will use the connection string during initializing Nodejs SDK\n     */\n    webSnippetConnectionString?: string;\n    /**\n     * Enable web instrumentation and automatic monitoring, default to false\n     */\n    enableWebInstrumentation: boolean;\n    /**\n    * Enable automatic incoming request tracking when running in Azure Functions\n    */\n    enableAutoCollectIncomingRequestAzureFunctions: boolean;\n    /**\n    * Application Insights resource connection string for web instrumentation and automatic monitoring\n    * Note: if no VALID connection string is provided here, web instrumentation will use the connection string during initializing Nodejs SDK\n    */\n    webInstrumentationConnectionString?: string;\n    /**\n     * Application Insights web Instrumentation config\n     * NOTE: if no config is provided here, web instrumentation will use default values\n     * IMPORTANT NOTE: please convert any functions and objects to double-quoted strings, otherwise they will be skipped.\n     * For example: if you want to pass in a function: function() { return 'hi'; },\n     * you SHOULD wrap it in double-quoted string: \"function () {\\n  return \\\"hi\\\";\\n}\"\n     * see more Application Insights web Instrumentation config details at: https://github.com/microsoft/ApplicationInsights-JS#configuration\n     */\n    webInstrumentationConfig?: IWebInstrumentationConfig[];\n    /**\n    * Application Insights web Instrumentation CDN url\n    * NOTE: this config can be changed from env variable: APPLICATIONINSIGHTS_WEB_INSTRUMENTATION_SOURCE or Json Config: webInstrumentationSrc\n    * If no resouce is provided here, default CDN endpoint: https://js.monitor.azure.com/scripts/b/ai will be used\n    * see more details at: https://github.com/microsoft/ApplicationInsights-JS\n    */\n    webInstrumentationSrc?: string;\n}\n\nexport interface IWebInstrumentationConfig {\n    /**\n     * Name of Application Insights web Instrumentation config to be changed\n     * see more Application Insights web Instrumentation config details at: https://github.com/microsoft/ApplicationInsights-JS#configuration\n     */\n    name: string;\n    /**\n    * value provided to replace the default config value above\n    */\n    value: string | boolean | number;\n}\n\nexport interface IEnvironmentConfig {\n    /** Connection String used to send telemetry payloads to */\n    connectionString: string;\n    /**\n    * In order to track context across asynchronous calls,\n    * some changes are required in third party libraries such as mongodb and redis.\n    * By default ApplicationInsights will use diagnostic-channel-publishers to monkey-patch some of these libraries.\n    * This property is to disable the feature.\n    * Note that by setting this flag, events may no longer be correctly associated with the right operation.\n    */\n    noDiagnosticChannel: boolean;\n    /**\n    * Disable individual monkey-patches.\n    * Set `noPatchModules` to a comma separated list of packages to disable.\n    * e.g. `\"noPatchModules\": \"console,redis\"` to avoid patching the console and redis packages.\n    * The following modules are available: `azuresdk, bunyan, console, mongodb, mongodb-core, mysql, redis, winston, pg`, and `pg-pool`.\n    */\n    noPatchModules: string;\n    /**\n    * HTTPS without a passed in agent\n    */\n    noHttpAgentKeepAlive: boolean;\n}\n\nexport interface IJsonConfig extends IBaseConfig, IEnvironmentConfig { }\n\nexport interface IConfig extends IBaseConfig {\n    /** An http.Agent to use for SDK HTTP traffic (Optional, Default undefined) */\n    httpAgent: http.Agent;\n    /** An https.Agent to use for SDK HTTPS traffic (Optional, Default undefined) */\n    httpsAgent: https.Agent;\n    /** AAD TokenCredential to use to authenticate the app */\n    aadTokenCredential?: azureCoreAuth.TokenCredential;\n}\n"]}