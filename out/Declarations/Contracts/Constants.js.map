{"version":3,"file":"Constants.js","sourceRoot":"","sources":["../../../Declarations/Contracts/Constants.ts"],"names":[],"mappings":";;;AAAA,yCAAyI;AAoBzI;IAAA;IAGA,CAAC;IAFiB,uCAAS,GAAW,MAAM,CAAC;IAC3B,qCAAO,GAAW,0BAA0B,CAAC;IAC/D,oCAAC;CAAA,AAHD,IAGC;AAHY,sEAA6B;AAS1C,SAAgB,wBAAwB,CAAC,MAAc;IACnD,OAAO,YAAY,IAAI,MAAM,IAAI,oFAAoF;QACjH,MAAM,YAAY,qBAAS;QAC3B,MAAM,YAAY,yBAAa;QAC/B,MAAM,YAAY,uBAAW;QAC7B,MAAM,YAAY,sBAAU;QAC5B,MAAM,YAAY,wBAAY;QAC9B,MAAM,YAAY,gCAAoB;QACtC,MAAM,YAAY,uBAAW,CAAC;AACtC,CAAC;AATD,4DASC","sourcesContent":["import { Domain, EventData, ExceptionData, MessageData, MetricData, PageViewData, RemoteDependencyData, RequestData } from \"./Generated\";\n\n/**\n * Breeze response definition.\n */\nexport interface BreezeResponse {\n    itemsReceived: number;\n    itemsAccepted: number;\n    errors: BreezeError[];\n}\n\n/**\n* Breeze errors.\n*/\nexport interface BreezeError {\n    index: number;\n    statusCode: number;\n    message: string;\n}\n\nexport class RemoteDependencyDataConstants {\n    public static TYPE_HTTP: string = \"Http\";\n    public static TYPE_AI: string = \"Http (tracked component)\";\n}\n\nexport interface ISupportProperties extends Domain {\n    properties: any;\n}\n\nexport function domainSupportsProperties(domain: Domain): domain is ISupportProperties {\n    return \"properties\" in domain || // Do extra typechecks in case the type supports it but properties is null/undefined\n        domain instanceof EventData ||\n        domain instanceof ExceptionData ||\n        domain instanceof MessageData ||\n        domain instanceof MetricData ||\n        domain instanceof PageViewData ||\n        domain instanceof RemoteDependencyData ||\n        domain instanceof RequestData;\n}\n\n/**\n * Subset of Connection String fields which this SDK can parse. Lower-typecased to\n * allow for case-insensitivity across field names\n * @type ConnectionStringKey\n */\nexport interface ConnectionString {\n    instrumentationkey?: string;\n    ingestionendpoint?: string;\n    liveendpoint?: string;\n    location?: string;\n    endpointsuffix?: string;\n\n    // Note: this is a node types backcompat equivalent to\n    // type ConnectionString = { [key in ConnectionStringKey]?: string }\n}\n\nexport type ConnectionStringKey = \"instrumentationkey\" | \"ingestionendpoint\" | \"liveendpoint\" | \"location\"| \"endpointsuffix\";\n"]}