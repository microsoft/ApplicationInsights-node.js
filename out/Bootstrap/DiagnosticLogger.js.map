{"version":3,"file":"DiagnosticLogger.js","sourceRoot":"","sources":["../../Bootstrap/DiagnosticLogger.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAEb,2BAA6B;AAE7B,qDAAgD;AAChD,uDAA6E;AAC7E,sCAAyC;AAEzC,IAAM,WAAW,GAAG,2CAA2C,CAAC;AAEhE;IAaI,0BAAoB,OAAwC,EAAE,kBAAsC;QAAhF,wBAAA,EAAA,iBAAwC;QAAE,mCAAA,EAAA,8BAAsC;QAAhF,YAAO,GAAP,OAAO,CAAiC;QAVpD,uBAAkB,GAA8B;YACpD,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE,SAAS;YACpB,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB;YACvC,IAAI,EAAE,SAAS;YACf,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,0CAA0C;YACxE,UAAU,EAAE,4CAAgC;YAC5C,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;SACvG,CAAA;QAGG,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACtD,CAAC;IAED,qCAAU,GAAV,UAAW,aAAsC;QAC7C,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,kBAAkB,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC;QACjF,IAAM,iBAAiB,GAA4B;YAC/C,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,WAAW;YACnB,OAAO,EAAE,aAAa,CAAC,OAAO;YAC9B,KAAK,mBAA8B;YACnC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACjC,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACxC,CAAC;IAED,mCAAQ,GAAR,UAAS,aAAsC;QAC3C,IAAI,OAAO,GAAW,aAAa,CAAC,OAAO,CAAC;QAC5C,IAAI,aAAa,CAAC,SAAS,EAAE;YACzB,OAAO,IAAI,aAAW,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAG,CAAC;SACjE;QACD,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,kBAAkB,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC;QACjF,IAAM,iBAAiB,GAA4B;YAC/C,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,WAAW;YACnB,OAAO,EAAE,OAAO;YAChB,KAAK,qBAA+B;YACpC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACjC,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC1C,CAAC;IA1CsB,kCAAiB,GAAW,oCAAoC,CAAC;IACjE,gCAAe,GAAW,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,IAAI,CAAC,IAAI,CAAC,qBAAO,EAAE,8BAA8B,CAAC,CAAC;IA0ClJ,uBAAC;CAAA,AA5CD,IA4CC;AA5CY,4CAAgB","sourcesContent":["\"use strict\";\n\nimport * as path from \"path\";\nimport * as DataModel from \"./DataModel\";\nimport { homedir } from \"./Helpers/FileHelpers\";\nimport { APPLICATION_INSIGHTS_SDK_VERSION } from \"../Declarations/Constants\";\nimport Util = require(\"../Library/Util\");\n\nconst LOGGER_NAME = \"applicationinsights.extension.diagnostics\";\n\nexport class DiagnosticLogger {\n    public static readonly DEFAULT_FILE_NAME: string = \"application-insights-extension.log\";\n    public static readonly DEFAULT_LOG_DIR: string = process.env.APPLICATIONINSIGHTS_LOGDIR || path.join(homedir, \"LogFiles/ApplicationInsights\");\n    private _defaultProperties: { [key: string]: string } = {\n        language: \"nodejs\",\n        operation: \"Startup\",\n        siteName: process.env.WEBSITE_SITE_NAME,\n        ikey: \"unknown\",\n        extensionVersion: process.env.ApplicationInsightsAgent_EXTENSION_VERSION,\n        sdkVersion: APPLICATION_INSIGHTS_SDK_VERSION,\n        subscriptionId: process.env.WEBSITE_OWNER_NAME ? process.env.WEBSITE_OWNER_NAME.split(\"+\")[0] : null\n    }\n\n    constructor(private _writer: DataModel.AgentLogger = console, instrumentationKey: string = \"unknown\") {\n        this._defaultProperties.ikey = instrumentationKey;\n    }\n\n    logMessage(diagnosticLog: DataModel.DiagnosticLog) {\n        let props = Object.assign({}, this._defaultProperties, diagnosticLog.properties);\n        const diagnosticMessage: DataModel.DiagnosticLog = {\n            properties: props,\n            logger: LOGGER_NAME,\n            message: diagnosticLog.message,\n            level: DataModel.SeverityLevel.INFO,\n            time: new Date().toUTCString()\n        };\n        this._writer.log(diagnosticMessage);\n    }\n\n    logError(diagnosticLog: DataModel.DiagnosticLog) {\n        let message: string = diagnosticLog.message;\n        if (diagnosticLog.exception) {\n            message += ` Error: ${Util.dumpObj(diagnosticLog.exception)}`;\n        }\n        let props = Object.assign({}, this._defaultProperties, diagnosticLog.properties);\n        const diagnosticMessage: DataModel.DiagnosticLog = {\n            properties: props,\n            logger: LOGGER_NAME,\n            message: message,\n            level: DataModel.SeverityLevel.ERROR,\n            time: new Date().toUTCString()\n        };\n        this._writer.error(diagnosticMessage);\n    }\n}\n"]}