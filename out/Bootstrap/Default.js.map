{"version":3,"file":"Default.js","sourceRoot":"","sources":["../../Bootstrap/Default.ts"],"names":[],"mappings":"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","sourcesContent":["import * as azureCoreAuth from \"@azure/core-auth\";\n\nimport * as types from \"../applicationinsights\";\nimport * as Helpers from \"./Helpers\";\nimport Constants = require(\"../Declarations/Constants\");\nimport { StatusLogger } from \"./StatusLogger\";\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\nimport Config = require(\"../Library/Config\");\nimport { DiagnosticLog, DiagnosticMessageId } from \"./DataModel\";\n\n// Private configuration vars\nlet _appInsights: typeof types | null;\nlet _prefix = \"ud_\"; // Unknown, Default\n\nexport const defaultConfig = new Config(); // Will read env variables, expose for Agent initialization\nconst _instrumentationKey = defaultConfig.instrumentationKey;\nlet _logger: DiagnosticLogger = new DiagnosticLogger(console, _instrumentationKey);\nlet _statusLogger: StatusLogger = new StatusLogger(console, _instrumentationKey);\n\n// Env var local constants\nconst forceStart = process.env.APPLICATIONINSIGHTS_FORCE_START === \"true\";\n\n\n/**\n * Sets the attach-time logger\n * @param logger logger which implements the `AgentLogger` interface\n */\nexport function setLogger(logger: DiagnosticLogger) {\n    return _logger = logger;\n}\n\n/**\n * Sets the string which is prefixed to the existing sdkVersion, e.g. `ad_`, `alr_`\n * @param prefix string prefix, including underscore. Defaults to `ud_`\n */\nexport function setUsagePrefix(prefix: string) {\n    _prefix = prefix;\n}\n\nexport function setStatusLogger(statusLogger: StatusLogger) {\n    _statusLogger = statusLogger;\n}\n\n/**\n * Try to setup and start this app insights instance if attach is enabled.\n * @param aadTokenCredential Optional AAD credential\n */\nexport function setupAndStart(aadTokenCredential?: azureCoreAuth.TokenCredential, isAzureFunction?: boolean): typeof types | null {\n    // If app already contains SDK, skip agent attach\n    if (!forceStart && Helpers.sdkAlreadyExists(_logger)) {\n        _statusLogger.logStatus({\n            ...StatusLogger.DEFAULT_STATUS,\n            AgentInitializedSuccessfully: false,\n            SDKPresent: true,\n            Reason: \"Application Insights SDK already exists.\"\n        })\n        return null;\n    }\n    if (!defaultConfig.instrumentationKey) {\n        const diagnosticLog: DiagnosticLog = {\n            message: \"Application Insights wanted to be started, but no Connection String was provided\",\n            properties: {\n                \"msgId\": DiagnosticMessageId.missingIkey\n            }\n        };\n        _logger.logError(diagnosticLog);\n        _statusLogger.logStatus({\n            ...StatusLogger.DEFAULT_STATUS,\n            AgentInitializedSuccessfully: false,\n            Reason: diagnosticLog.message\n        });\n        return null;\n    }\n\n    try {\n        _appInsights = require(\"../applicationinsights\");\n        if (_appInsights.defaultClient) {\n            // setupAndStart was already called, return the result\n            const diagnosticLog: DiagnosticLog = {\n                message: \"Setup was attempted on the Application Insights Client multiple times. Aborting and returning the first client instance.\",\n                properties: {\n                    \"msgId\": DiagnosticMessageId.setupAlreadyCalled\n                }\n            };\n            _logger.logError(diagnosticLog);\n            return _appInsights;\n        }\n\n        const prefixInternalSdkVersion = function (envelope: types.Contracts.Envelope, _contextObjects: Object) {\n            try {\n                var appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;\n                envelope.tags[appInsightsSDKVersion] = _prefix + envelope.tags[appInsightsSDKVersion];\n            } catch (e) {\n                const diagnosticLog: DiagnosticLog = {\n                    message: \"Error prefixing SDK version.\",\n                    exception: e,\n                    properties: {\n                        \"msgId\": DiagnosticMessageId.prefixFailed\n                    }\n                };\n                _logger.logError(diagnosticLog);\n            }\n            return true;\n        }\n\n        const copyOverPrefixInternalSdkVersionToHeartBeatMetric = function (envelope: types.Contracts.Envelope, _contextObjects: Object) {\n            var appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;\n            const sdkVersion = envelope.tags[appInsightsSDKVersion] || \"\";\n            if (envelope.name === Constants.HeartBeatMetricName) {\n                ((envelope.data as any).baseData).properties = ((envelope.data as any).baseData).properties || {};\n                ((envelope.data as any).baseData).properties[\"sdk\"] = sdkVersion;\n            }\n\n            return true;\n        }\n\n        // Instrument the SDK\n        // Azure Functions\n        if (isAzureFunction) {\n            // Agent will always run in parallel with Azure Functions .NET Agent, disable requests and exceptions to avoid duplication of telemetry\n            _appInsights.setup().setSendLiveMetrics(false)\n                .setAutoCollectPerformance(false)\n                .setAutoCollectPreAggregatedMetrics(false)\n                .setAutoCollectIncomingRequestAzureFunctions(false)\n                .setAutoCollectRequests(false)\n                .setAutoCollectExceptions(false)\n                .setAutoCollectDependencies(true)\n                .setAutoCollectHeartbeat(true)\n                .setUseDiskRetryCaching(true);\n        }\n        // App Services\n        else {\n            _appInsights.setup().setSendLiveMetrics(true)\n                .setAutoCollectPerformance(true)\n                .setAutoCollectPreAggregatedMetrics(true)\n                .setAutoCollectIncomingRequestAzureFunctions(false)\n                .setAutoCollectRequests(true)\n                .setAutoCollectDependencies(true)\n                .setAutoCollectExceptions(true)\n                .setAutoCollectHeartbeat(true)\n                .setUseDiskRetryCaching(true);\n        }\n\n        _appInsights.defaultClient.setAutoPopulateAzureProperties(true);\n        _appInsights.defaultClient.addTelemetryProcessor(prefixInternalSdkVersion);\n        _appInsights.defaultClient.addTelemetryProcessor(copyOverPrefixInternalSdkVersionToHeartBeatMetric);\n        if (aadTokenCredential) {\n            const diagnosticLog: DiagnosticLog = {\n                message: \"Application Insights using AAD Token Credential.\",\n                properties: {\n                    \"msgId\": DiagnosticMessageId.aadEnabled\n                }\n            };\n            _logger.logMessage(diagnosticLog);\n            _appInsights.defaultClient.config.aadTokenCredential = aadTokenCredential;\n        }\n\n        _appInsights.start();\n        // Add attach flag in Statsbeat\n        let statsbeat = _appInsights.defaultClient.getStatsbeat();\n        if (statsbeat) {\n            statsbeat.setCodelessAttach();\n        }\n\n        // Agent successfully instrumented the SDK\n        const diagnosticLog: DiagnosticLog = {\n            message: \"Application Insights was started succesfully.\",\n            properties: {\n                \"msgId\": DiagnosticMessageId.attachSuccessful\n            }\n        };\n        _logger.logMessage(diagnosticLog);\n        _statusLogger.logStatus({\n            ...StatusLogger.DEFAULT_STATUS,\n            AgentInitializedSuccessfully: true\n        });\n    } catch (e) {\n        const diagnosticLog: DiagnosticLog = {\n            message: \"Error setting up Application Insights.\",\n            exception: e,\n            properties: {\n                \"msgId\": DiagnosticMessageId.unknownError\n            }\n        };\n        _logger.logError(diagnosticLog);\n        _statusLogger.logStatus({\n            ...StatusLogger.DEFAULT_STATUS,\n            AgentInitializedSuccessfully: false,\n            Reason: `Error setting up Application Insights: ${e && e.message}`\n        })\n    }\n    return _appInsights;\n}\n\n"]}