{"version":3,"file":"Helpers.js","sourceRoot":"","sources":["../../Bootstrap/Helpers.ts"],"names":[],"mappings":";;;AAAA,yCAAiE;AAGjE,SAAgB,gBAAgB,CAAC,OAAyB;IACtD,IAAI;QACA,+HAA+H;QAC/H,IAAI,WAAW,SAAQ,CAAC;QACxB,IAAI;YACA,YAAY;YACZ,WAAW,GAAI,OAAO,CAAC,OAAe,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;SAC7F;QAAC,OAAO,CAAC,EAAE;YACR,YAAY;YACZ,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,mCAAmC,CAAC,CAAC;SACtF;QACD,6HAA6H;QAC7H,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;YAClC,IAAM,aAAa,GAAkB;gBACjC,OAAO,EAAE,sIAAsI,GAAG,WAAW;gBAC7J,UAAU,EAAE;oBACR,OAAO,EAAE,+BAAmB,CAAC,SAAS;iBACzC;aACJ,CAAC;YACF,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAChC,OAAO,IAAI,CAAC;SACf;aACI;YACD,2FAA2F;YAC3F,OAAO,KAAK,CAAC;SAChB;KACJ;IAAC,OAAO,CAAC,EAAE;QACR,mGAAmG;QACnG,OAAO,KAAK,CAAC;KAChB;AACL,CAAC;AA9BD,4CA8BC","sourcesContent":["import { DiagnosticLog, DiagnosticMessageId } from \"./DataModel\";\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\n\nexport function sdkAlreadyExists(_logger: DiagnosticLogger): boolean {\n    try {\n        // appInstance should either resolve to user SDK or crash. If it resolves to attach SDK, user probably modified their NODE_PATH\n        let appInstance: string;\n        try {\n            // Node 8.9+\n            appInstance = (require.resolve as any)(\"applicationinsights\", { paths: [process.cwd()] });\n        } catch (e) {\n            // Node <8.9\n            appInstance = require.resolve(process.cwd() + \"/node_modules/applicationinsights\");\n        }\n        // If loaded instance is in Azure machine home path do not attach the SDK, this means customer already instrumented their app\n        if (appInstance.indexOf(\"home\") > -1) {\n            const diagnosticLog: DiagnosticLog = {\n                message: \"Application Insights SDK already exists. Module is already installed in this application; not re-attaching. Installed SDK location: \" + appInstance,\n                properties: {\n                    \"msgId\": DiagnosticMessageId.sdkExists\n                }\n            };\n            _logger.logError(diagnosticLog);\n            return true;\n        }\n        else {\n            // ApplicationInsights could be loaded outside of customer application, attach in this case\n            return false;\n        }\n    } catch (e) {\n        // crashed while trying to resolve \"applicationinsights\", so SDK does not exist. Attach appinsights\n        return false;\n    }\n}"]}