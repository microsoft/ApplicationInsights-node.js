{"version":3,"file":"applicationinsights.js","sourceRoot":"","sources":["../applicationinsights.ts"],"names":[],"mappings":";;;AAAA,sFAAyF,CAAC,kBAAkB;AAC5G,6DAAgE;AAChE,mEAAsE;AACtE,qEAAwE;AACxE,sFAAyF;AACzF,sDAAyD;AACzD,wDAA2D;AAC3D,+EAAkF;AAClF,uEAA0E;AAC1E,qEAAwE;AACxE,2CAA8C;AAC9C,mEAAsE;AAGtE,wEAA4G;AAC5G,0EAAyE;AAEzE,4EAA4E;AAC5E,mFAAmF;AACnF,0DAAgE;AAChE,wDAA8D;AAC9D,6DAAmE;AAEnE,IAAY,uBAWX;AAXD,WAAY,uBAAuB;IAC/B;;OAEG;IAEH,iEAAM,CAAA;IAEN;;OAEG;IACH,iFAAU,CAAA;AACd,CAAC,EAXW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAWlC;AAED,uCAAuC;AACvC,IAAI,aAAa,GAAG,4BAA4B,EAAE,CAAC;AACnD,IAAI,UAAU,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;AAC3C,IAAI,aAAa,GAAG,aAAa,CAAC,YAAY,EAAE,CAAC;AACjD,IAAI,aAAa,GAAG,aAAa,CAAC,YAAY,EAAE,CAAC;AACjD,IAAI,cAAc,GAAG,aAAa,CAAC,aAAa,EAAE,CAAC;AACnD,IAAI,uBAAuB,GAAG,aAAa,CAAC,sBAAsB,EAAE,CAAC;AACrE,IAAI,YAAY,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC,yBAAyB;AACzE,IAAI,WAAW,GAAG,aAAa,CAAC,UAAU,EAAE,CAAC;AAC7C,IAAI,eAAe,GAAG,aAAa,CAAC,cAAc,EAAE,CAAC;AACrD,IAAI,YAAY,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;AAC/C,IAAI,cAAc,GAAG,aAAa,CAAC,aAAa,EAAE,CAAC;AACnD,IAAI,eAAwB,CAAC;AAC7B,IAAI,qBAAqB,GAAG,aAAa,CAAC,oBAAoB,EAAE,CAAC,CAAC,iBAAiB;AACnF,IAAI,oBAAoB,GAAG,aAAa,CAAC,mBAAmB,EAAE,CAAC;AAC/D,IAAI,wBAAkD,CAAC;AACvD,IAAI,mBAAmB,GAAG,aAAa,CAAC,kBAAkB,EAAE,CAAC,CAAC,mBAAmB;AACjF,IAAI,iBAAiB,GAAG,aAAa,CAAC,gBAAgB,EAAE,CAAC,CAAC,mBAAmB;AAE7E,SAAS,4BAA4B;IACjC,OAAO;QACH,SAAS,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QACrB,YAAY,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK;QACzB,YAAY,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QACxB,aAAa,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QACzB,sBAAsB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QAClC,WAAW,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK;QACxB,UAAU,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QACtB,cAAc,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QAC1B,WAAW,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QACvB,aAAa,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QACzB,oBAAoB,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK;QACjC,mBAAmB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QAC/B,kBAAkB,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK;QAC/B,gBAAgB,EAAE,cAAM,OAAA,KAAK,EAAL,CAAK;KAChC,CAAA;AACL,CAAC;AAED,IAAI,kBAAkB,GAAW,SAAS,CAAC;AAC3C,IAAI,kBAAkB,GAAW,SAAS,CAAC;AAC3C,IAAI,2BAA2B,GAAW,SAAS,CAAC;AAEpD,IAAI,QAA4B,CAAC;AACjC,IAAI,WAAkC,CAAC;AACvC,IAAI,YAAoC,CAAC;AACzC,IAAI,qBAAqD,CAAC;AAC1D,IAAI,UAAqB,CAAC;AAC1B,IAAI,WAAuB,CAAC;AAC5B,IAAI,kBAAgD,CAAC;AACrD,IAAI,eAAwC,CAAC;AAC7C,IAAI,eAA4C,CAAC;AACjD,IAAI,eAAmC,CAAC;AAExC,IAAI,UAAU,GAAG,KAAK,CAAC;AAQvB,IAAI,uBAA+C,CAAC;AAEpD;;;;;;;;;GASG;AACH,SAAgB,KAAK,CAAC,WAAoB;IACtC,IAAI,CAAC,qBAAa,EAAE;QAChB,qBAAa,GAAG,IAAI,uBAAe,CAAC,WAAW,CAAC,CAAC;QACjD,iBAAiB,EAAE,CAAC;QACpB,QAAQ,GAAG,IAAI,kBAAkB,CAAC,qBAAa,CAAC,CAAC;QACjD,WAAW,GAAG,IAAI,qBAAqB,CAAC,qBAAa,CAAC,CAAC;QACvD,YAAY,GAAG,IAAI,sBAAsB,CAAC,qBAAa,CAAC,CAAC;QACzD,qBAAqB,GAAG,IAAI,8BAA8B,CAAC,qBAAa,CAAC,CAAC;QAC1E,UAAU,GAAG,IAAI,SAAS,CAAC,qBAAa,CAAC,CAAC;QAC1C,WAAW,GAAG,IAAI,UAAU,CAAC,qBAAa,CAAC,CAAC;QAC5C,eAAe,GAAG,IAAI,uBAAuB,CAAC,qBAAa,CAAC,CAAC;QAC7D,eAAe,GAAG,IAAI,2BAA2B,CAAC,qBAAa,CAAC,CAAC;QACjE,IAAI,CAAC,kBAAkB,EAAE;YACrB,kBAAkB,GAAG,IAAI,gDAA4B,CAAC,qBAAa,CAAC,CAAC;SACxE;QACD,eAAe,GAAG,IAAI,uCAAkB,CAAC,qBAAa,CAAC,CAAC;KAC3D;SAAM;QACH,OAAO,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;KACvD;IAED,IAAI,qBAAa,IAAI,qBAAa,CAAC,OAAO,EAAE;QACxC,qBAAa,CAAC,OAAO,CAAC,sBAAsB,CAAC,YAAY,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;KACtG;IAED,OAAO,aAAa,CAAC;AACzB,CAAC;AAzBD,sBAyBC;AAED;;;;;GAKG;AACH,SAAgB,KAAK;IACjB,IAAI,CAAC,CAAC,qBAAa,EAAE;QACjB,UAAU,GAAG,IAAI,CAAC;QAClB,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAC3C,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAClC,YAAY,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACpC,qBAAqB,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;QACtD,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAChC,kBAAkB,CAAC,MAAM,CAAC,oBAAoB,EAAE,wBAAwB,CAAC,CAAC;QAC1E,eAAe,CAAC,kBAAkB,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;QACpE,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACpC,eAAe,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACxC,WAAW,CAAC,MAAM,CAAC,mBAAmB,EAAE,2BAA2B,CAAC,CAAC;QACrE,IAAI,yBAAiB,IAAI,qBAAqB,EAAE;YAC5C,yBAAiB,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;SACnD;QACD,eAAe,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;KAC7C;SAAM;QACH,OAAO,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;KACvD;IAED,OAAO,aAAa,CAAC;AACzB,CAAC;AAtBD,sBAsBC;AAED,SAAS,iBAAiB;IACtB,UAAU,GAAG,qBAAa,CAAC,MAAM,CAAC,gCAAgC,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,gCAAgC,CAAC,CAAC,CAAC,UAAU,CAAC;IACtJ,aAAa,GAAG,qBAAa,CAAC,MAAM,CAAC,wBAAwB,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC,aAAa,CAAC;IAC5I,aAAa,GAAG,qBAAa,CAAC,MAAM,CAAC,2BAA2B,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC,CAAC,aAAa,CAAC;IAClJ,cAAc,GAAG,qBAAa,CAAC,MAAM,CAAC,4BAA4B,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC,CAAC,cAAc,CAAC;IACtJ,uBAAuB,GAAG,qBAAa,CAAC,MAAM,CAAC,qCAAqC,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,qCAAqC,CAAC,CAAC,CAAC,uBAAuB,CAAC;IAC1L,YAAY,GAAG,qBAAa,CAAC,MAAM,CAAC,0BAA0B,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC,CAAC,YAAY,CAAC;IAC9I,WAAW,GAAG,qBAAa,CAAC,MAAM,CAAC,yBAAyB,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,CAAC,WAAW,CAAC;IAC1I,eAAe,GAAG,qBAAa,CAAC,MAAM,CAAC,+BAA+B,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC,CAAC,eAAe,CAAC;IAC9J,cAAc,GAAG,qBAAa,CAAC,MAAM,CAAC,+BAA+B,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC,CAAC,cAAc,CAAC;IAC5J,eAAe,GAAG,qBAAa,CAAC,MAAM,CAAC,mBAAmB,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,eAAe,CAAC;IACtI,mBAAmB,GAAG,qBAAa,CAAC,MAAM,CAAC,wBAAwB,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC,mBAAmB,CAAC;IACxJ,mBAAmB,GAAG,qBAAa,CAAC,MAAM,CAAC,6BAA6B,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,CAAC;IAC/G,iBAAiB,GAAG,qBAAa,CAAC,MAAM,CAAC,8CAA8C,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAa,CAAC,MAAM,CAAC,8CAA8C,CAAC,CAAC,CAAC,iBAAiB,CAAC;IAChM,IAAM,qBAAqB,GAAG,gDAA4B,CAAC,YAAY,CAAC,qBAAa,CAAC,MAAM,CAAC,gCAAgC,EAAE,qBAAa,CAAC,MAAM,CAAC,CAAC;IACrJ,oBAAoB,GAAG,qBAAqB,CAAC,SAAS,CAAC;IACvD,wBAAwB,GAAG,qBAAqB,CAAC,eAAe,CAAC;AAErE,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,SAAgB,qBAAqB;IACjC,IAAI,cAAc,EAAE;QAChB,OAAO,yBAAyB,CAAC,yBAAyB,CAAC,iBAAiB,EAAE,CAAC;KAClF;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAND,sDAMC;AAUD,SAAgB,cAAc,CAAC,OAA0G,EAAE,OAAkD;IACzL,OAAO,yBAAyB,CAAC,yBAAyB,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAChG,CAAC;AAFD,wCAEC;AAED;;;;;GAKG;AACH,SAAgB,0BAA0B,CAAqB,EAAK,EAAE,OAAsD;IACxH,OAAO,yBAAyB,CAAC,yBAAyB,CAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;AACzF,CAAC;AAFD,gEAEC;AAED;;GAEG;AACH;IAAA;IA8OA,CAAC;IA1OG;;;;;;MAME;IACY,uCAAyB,GAAvC,UAAwC,KAA8B;QAClE,oBAAoB,CAAC,UAAU,GAAG,KAAK,KAAK,uBAAuB,CAAC,UAAU,CAAC;QAC/E,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACW,mCAAqB,GAAnC,UAAoC,KAAc,EAAE,iBAAkC;QAAlC,kCAAA,EAAA,yBAAkC;QAClF,UAAU,GAAG,KAAK,CAAC;QACnB,aAAa,GAAG,iBAAiB,CAAC;QAClC,IAAI,UAAU,EAAE;YACZ,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;SAC7C;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACW,sCAAwB,GAAtC,UAAuC,KAAc;QACjD,aAAa,GAAG,KAAK,CAAC;QACtB,IAAI,UAAU,EAAE;YACZ,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC7B;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACW,uCAAyB,GAAvC,UAAwC,KAAc,EAAE,sBAAiE;QAAjE,uCAAA,EAAA,6BAAiE;QACrH,cAAc,GAAG,KAAK,CAAC;QACvB,IAAM,qBAAqB,GAAG,gDAA4B,CAAC,YAAY,CAAC,sBAAsB,EAAE,qBAAa,CAAC,MAAM,CAAC,CAAC;QACtH,oBAAoB,GAAG,qBAAqB,CAAC,SAAS,CAAC;QACvD,wBAAwB,GAAG,qBAAqB,CAAC,eAAe,CAAC;QACjE,IAAI,UAAU,EAAE;YACZ,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC3B,kBAAkB,CAAC,MAAM,CAAC,qBAAqB,CAAC,SAAS,EAAE,qBAAqB,CAAC,eAAe,CAAC,CAAC;SACrG;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACW,gDAAkC,GAAhD,UAAiD,KAAc;QAC3D,uBAAuB,GAAG,KAAK,CAAC;QAChC,IAAI,UAAU,EAAE;YACZ,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACvC;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACW,qCAAuB,GAArC,UAAsC,KAAc;QAChD,YAAY,GAAG,KAAK,CAAC;QACrB,IAAI,UAAU,EAAE;YACZ,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC5B;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;;;OAMG;IACW,2CAA6B,GAA3C,UAA4C,KAAc,EAAE,0BAAmC;QAC3F,mBAAmB,GAAG,KAAK,CAAC;QAC5B,2BAA2B,GAAG,0BAA0B,CAAC;QACzD,IAAI,UAAU,EAAE;YACZ,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,2BAA2B,CAAC,CAAC;SAC1D;QACD,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACW,sCAAwB,GAAtC,UAAuC,KAAc,EAAE,0BAAmC;QACtF,mBAAmB,GAAG,KAAK,CAAC;QAC5B,2BAA2B,GAAG,0BAA0B,CAAC;QACzD,IAAI,UAAU,EAAE;YACZ,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,2BAA2B,CAAC,CAAC;SAC1D;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACW,oCAAsB,GAApC,UAAqC,KAAc;QAC/C,WAAW,GAAG,KAAK,CAAC;QACpB,IAAI,UAAU,EAAE;YACZ,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACjC;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACW,wCAA0B,GAAxC,UAAyC,KAAc;QACnD,eAAe,GAAG,KAAK,CAAC;QACxB,IAAI,UAAU,EAAE;YACZ,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACjC;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACW,0CAA4B,GAA1C,UAA2C,KAAc,EAAE,aAAuB;QAC9E,cAAc,GAAG,KAAK,CAAC;QACvB,eAAe,GAAG,aAAa,CAAC;QAChC,IAAI,UAAU,EAAE;YACZ,eAAe,CAAC,kBAAkB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;SAC5D;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;;;;;;OASG;IACW,oCAAsB,GAApC,UAAqC,KAAc,EAAE,cAAuB,EAAE,cAAuB;QACjG,YAAY,GAAG,KAAK,CAAC;QACrB,kBAAkB,GAAG,cAAc,CAAC;QACpC,kBAAkB,GAAG,cAAc,CAAC;QACpC,IAAI,qBAAa,IAAI,qBAAa,CAAC,OAAO,EAAE;YACxC,qBAAa,CAAC,OAAO,CAAC,sBAAsB,CAAC,YAAY,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;SACtG;QACD,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACW,gCAAkB,GAAhC,UAAiC,kBAA0B,EAAE,oBAA2B;QAAvD,mCAAA,EAAA,0BAA0B;QAAE,qCAAA,EAAA,2BAA2B;QACpF,OAAO,CAAC,WAAW,GAAG,kBAAkB,CAAC;QACzC,OAAO,CAAC,eAAe,GAAG,CAAC,oBAAoB,CAAC;QAChD,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACW,yDAA2C,GAAzD,UAA0D,KAAc;QACpE,iBAAiB,GAAG,KAAK,CAAC;QAC1B,IAAI,UAAU,EAAE;YACZ,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACjC;QACD,OAAO,aAAa,CAAC;IACzB,CAAC;IAED;;;OAGG;IACW,gCAAkB,GAAhC,UAAiC,MAAc;QAAd,uBAAA,EAAA,cAAc;QAC3C,IAAI,CAAC,qBAAa,EAAE;YAChB,4EAA4E;YAC5E,OAAO,CAAC,IAAI,CAAC,gEAAgE,CAAC,CAAC;YAC/E,OAAO,aAAa,CAAC;SACxB;QAED,IAAI,CAAC,yBAAiB,IAAI,MAAM,EAAE;YAC9B,4EAA4E;YAC5E,yBAAiB,GAAG,IAAI,gBAAgB,CAAC,qBAAa,CAAC,MAAM,EAAE,qBAAa,CAAC,OAAO,EAAE,qBAAa,CAAC,uBAAuB,CAAC,CAAC;YAC7H,uBAAuB,GAAG,IAAI,sBAAsB,CAAC,yBAAwB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC3F,yBAAiB,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;YACxD,qBAAa,CAAC,gBAAgB,GAAG,yBAAiB,CAAC,CAAC,yGAAyG;SAChK;aAAM,IAAI,yBAAiB,EAAE;YAC1B,+CAA+C;YAC/C,yBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACpC;QACD,qBAAqB,GAAG,MAAM,CAAC;QAC/B,OAAO,aAAa,CAAC;IACzB,CAAC;IA5OD,oDAAoD;IACtC,mBAAK,GAAG,KAAK,CAAC;IA4OhC,oBAAC;CAAA,AA9OD,IA8OC;AA9OY,sCAAa;AAgP1B;;EAEE;AACF,SAAgB,OAAO;IACnB,oBAAoB,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,mBAAmB;IAC3D,qBAAa,GAAG,IAAI,CAAC;IACrB,UAAU,GAAG,KAAK,CAAC;IACnB,IAAI,QAAQ,EAAE;QACV,QAAQ,CAAC,OAAO,EAAE,CAAC;KACtB;IACD,IAAI,WAAW,EAAE;QACb,WAAW,CAAC,OAAO,EAAE,CAAC;KACzB;IACD,IAAI,YAAY,EAAE;QACd,YAAY,CAAC,OAAO,EAAE,CAAC;KAC1B;IACD,IAAI,qBAAqB,EAAE;QACvB,qBAAqB,CAAC,OAAO,EAAE,CAAC;KACnC;IACD,IAAI,UAAU,EAAE;QACZ,UAAU,CAAC,OAAO,EAAE,CAAC;KACxB;IACD,IAAI,WAAW,EAAE;QACb,WAAW,CAAC,OAAO,EAAE,CAAC;KACzB;IACD,IAAI,kBAAkB,EAAE;QACpB,kBAAkB,CAAC,OAAO,EAAE,CAAC;KAChC;IACD,IAAI,eAAe,EAAE;QACjB,eAAe,CAAC,OAAO,EAAE,CAAC;KAC7B;IACD,IAAI,eAAe,EAAE;QACjB,eAAe,CAAC,OAAO,EAAE,CAAC;KAC7B;IACD,IAAI,yBAAiB,EAAE;QACnB,yBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,qBAAqB,GAAG,KAAK,CAAC;QAC9B,yBAAiB,GAAG,SAAS,CAAC;KACjC;IACD,IAAI,eAAe,EAAE;QACjB,eAAe,CAAC,OAAO,EAAE,CAAC;KAC7B;AACL,CAAC;AAvCD,0BAuCC","sourcesContent":["import CorrelationContextManager = require(\"./AutoCollection/CorrelationContextManager\"); // Keep this first\nimport AutoCollectConsole = require(\"./AutoCollection/Console\");\nimport AutoCollectExceptions = require(\"./AutoCollection/Exceptions\");\nimport AutoCollectPerformance = require(\"./AutoCollection/Performance\");\nimport AutoCollecPreAggregatedMetrics = require(\"./AutoCollection/PreAggregatedMetrics\");\nimport HeartBeat = require(\"./AutoCollection/HeartBeat\");\nimport WebSnippet = require(\"./AutoCollection/WebSnippet\");\nimport AutoCollectHttpDependencies = require(\"./AutoCollection/HttpDependencies\");\nimport AutoCollectHttpRequests = require(\"./AutoCollection/HttpRequests\");\nimport CorrelationIdManager = require(\"./Library/CorrelationIdManager\");\nimport Logging = require(\"./Library/Logging\");\nimport QuickPulseClient = require(\"./Library/QuickPulseStateManager\");\nimport { IncomingMessage } from \"http\";\nimport { SpanContext } from \"@opentelemetry/api\";\nimport { AutoCollectNativePerformance, IDisabledExtendedMetrics } from \"./AutoCollection/NativePerformance\";\nimport { AzureFunctionsHook } from \"./AutoCollection/AzureFunctionsHook\";\n\n// We export these imports so that SDK users may use these classes directly.\n// They're exposed using \"export import\" so that types are passed along as expected\nexport import TelemetryClient = require(\"./Library/NodeClient\");\nexport import Contracts = require(\"./Declarations/Contracts\");\nexport import azureFunctionsTypes = require(\"./Library/Functions\");\n\nexport enum DistributedTracingModes {\n    /**\n     * Send Application Insights correlation headers\n     */\n\n    AI = 0,\n\n    /**\n     * (Default) Send both W3C Trace Context headers and back-compatibility Application Insights headers\n     */\n    AI_AND_W3C\n}\n\n// Default autocollection configuration\nlet defaultConfig = _getDefaultAutoCollectConfig();\nlet _isConsole = defaultConfig.isConsole();\nlet _isConsoleLog = defaultConfig.isConsoleLog();\nlet _isExceptions = defaultConfig.isExceptions();\nlet _isPerformance = defaultConfig.isPerformance();\nlet _isPreAggregatedMetrics = defaultConfig.isPreAggregatedMetrics();\nlet _isHeartBeat = defaultConfig.isHeartBeat(); // off by default for now\nlet _isRequests = defaultConfig.isRequests();\nlet _isDependencies = defaultConfig.isDependencies();\nlet _isDiskRetry = defaultConfig.isDiskRetry();\nlet _isCorrelating = defaultConfig.isCorrelating();\nlet _forceClsHooked: boolean;\nlet _isSendingLiveMetrics = defaultConfig.isSendingLiveMetrics(); // Off by default\nlet _isNativePerformance = defaultConfig.isNativePerformance();\nlet _disabledExtendedMetrics: IDisabledExtendedMetrics;\nlet _isSnippetInjection = defaultConfig.isSnippetInjection(); // default to false\nlet _isAzureFunctions = defaultConfig.isAzureFunctions(); // default to false\n\nfunction _getDefaultAutoCollectConfig() {\n    return {\n        isConsole: () => true,\n        isConsoleLog: () => false,\n        isExceptions: () => true,\n        isPerformance: () => true,\n        isPreAggregatedMetrics: () => true,\n        isHeartBeat: () => false, // off by default for now\n        isRequests: () => true,\n        isDependencies: () => true,\n        isDiskRetry: () => true,\n        isCorrelating: () => true,\n        isSendingLiveMetrics: () => false, // Off by default\n        isNativePerformance: () => true,\n        isSnippetInjection: () => false,\n        isAzureFunctions: () => false\n    }\n}\n\nlet _diskRetryInterval: number = undefined;\nlet _diskRetryMaxBytes: number = undefined;\nlet _webSnippetConnectionString: string = undefined;\n\nlet _console: AutoCollectConsole;\nlet _exceptions: AutoCollectExceptions;\nlet _performance: AutoCollectPerformance;\nlet _preAggregatedMetrics: AutoCollecPreAggregatedMetrics;\nlet _heartbeat: HeartBeat;\nlet _webSnippet: WebSnippet;\nlet _nativePerformance: AutoCollectNativePerformance;\nlet _serverRequests: AutoCollectHttpRequests;\nlet _clientRequests: AutoCollectHttpDependencies;\nlet _azureFunctions: AzureFunctionsHook;\n\nlet _isStarted = false;\n\n/**\n* The default client, initialized when setup was called. To initialize a different client\n* with its own configuration, use `new TelemetryClient(instrumentationKey?)`.\n*/\nexport let defaultClient: TelemetryClient;\nexport let liveMetricsClient: QuickPulseClient;\nlet _performanceLiveMetrics: AutoCollectPerformance;\n\n/**\n * Initializes the default client. Should be called after setting\n * configuration options.\n *\n * @param setupString the Connection String or Instrumentation Key to use. Optional, if\n * this is not specified, the value will be read from the environment\n * variable APPLICATIONINSIGHTS_CONNECTION_STRING.\n * @returns {Configuration} the configuration class to initialize\n * and start the SDK.\n */\nexport function setup(setupString?: string) {\n    if (!defaultClient) {\n        defaultClient = new TelemetryClient(setupString);\n        _initializeConfig();\n        _console = new AutoCollectConsole(defaultClient);\n        _exceptions = new AutoCollectExceptions(defaultClient);\n        _performance = new AutoCollectPerformance(defaultClient);\n        _preAggregatedMetrics = new AutoCollecPreAggregatedMetrics(defaultClient);\n        _heartbeat = new HeartBeat(defaultClient);\n        _webSnippet = new WebSnippet(defaultClient);\n        _serverRequests = new AutoCollectHttpRequests(defaultClient);\n        _clientRequests = new AutoCollectHttpDependencies(defaultClient);\n        if (!_nativePerformance) {\n            _nativePerformance = new AutoCollectNativePerformance(defaultClient);\n        }\n        _azureFunctions = new AzureFunctionsHook(defaultClient);\n    } else {\n        Logging.info(\"The default client is already setup\");\n    }\n\n    if (defaultClient && defaultClient.channel) {\n        defaultClient.channel.setUseDiskRetryCaching(_isDiskRetry, _diskRetryInterval, _diskRetryMaxBytes);\n    }\n\n    return Configuration;\n}\n\n/**\n * Starts automatic collection of telemetry. Prior to calling start no\n * telemetry will be *automatically* collected, though manual collection\n * is enabled.\n * @returns {ApplicationInsights} this class\n */\nexport function start() {\n    if (!!defaultClient) {\n        _isStarted = true;\n        _console.enable(_isConsole, _isConsoleLog);\n        _exceptions.enable(_isExceptions);\n        _performance.enable(_isPerformance);\n        _preAggregatedMetrics.enable(_isPreAggregatedMetrics);\n        _heartbeat.enable(_isHeartBeat);\n        _nativePerformance.enable(_isNativePerformance, _disabledExtendedMetrics);\n        _serverRequests.useAutoCorrelation(_isCorrelating, _forceClsHooked);\n        _serverRequests.enable(_isRequests);\n        _clientRequests.enable(_isDependencies);\n        _webSnippet.enable(_isSnippetInjection, _webSnippetConnectionString);\n        if (liveMetricsClient && _isSendingLiveMetrics) {\n            liveMetricsClient.enable(_isSendingLiveMetrics);\n        }\n        _azureFunctions.enable(_isAzureFunctions);\n    } else {\n        Logging.warn(\"Start cannot be called before setup\");\n    }\n\n    return Configuration;\n}\n\nfunction _initializeConfig() {\n    _isConsole = defaultClient.config.enableAutoCollectExternalLoggers !== undefined ? defaultClient.config.enableAutoCollectExternalLoggers : _isConsole;\n    _isConsoleLog = defaultClient.config.enableAutoCollectConsole !== undefined ? defaultClient.config.enableAutoCollectConsole : _isConsoleLog;\n    _isExceptions = defaultClient.config.enableAutoCollectExceptions !== undefined ? defaultClient.config.enableAutoCollectExceptions : _isExceptions;\n    _isPerformance = defaultClient.config.enableAutoCollectPerformance !== undefined ? defaultClient.config.enableAutoCollectPerformance : _isPerformance;\n    _isPreAggregatedMetrics = defaultClient.config.enableAutoCollectPreAggregatedMetrics !== undefined ? defaultClient.config.enableAutoCollectPreAggregatedMetrics : _isPreAggregatedMetrics;\n    _isHeartBeat = defaultClient.config.enableAutoCollectHeartbeat !== undefined ? defaultClient.config.enableAutoCollectHeartbeat : _isHeartBeat;\n    _isRequests = defaultClient.config.enableAutoCollectRequests !== undefined ? defaultClient.config.enableAutoCollectRequests : _isRequests;\n    _isDependencies = defaultClient.config.enableAutoDependencyCorrelation !== undefined ? defaultClient.config.enableAutoDependencyCorrelation : _isDependencies;\n    _isCorrelating = defaultClient.config.enableAutoDependencyCorrelation !== undefined ? defaultClient.config.enableAutoDependencyCorrelation : _isCorrelating;\n    _forceClsHooked = defaultClient.config.enableUseAsyncHooks !== undefined ? defaultClient.config.enableUseAsyncHooks : _forceClsHooked;\n    _isSnippetInjection = defaultClient.config.enableWebInstrumentation !== undefined ? defaultClient.config.enableWebInstrumentation : _isSnippetInjection;\n    _isSnippetInjection = defaultClient.config.enableAutoWebSnippetInjection === true ? true : _isSnippetInjection;\n    _isAzureFunctions = defaultClient.config.enableAutoCollectIncomingRequestAzureFunctions !== undefined ? defaultClient.config.enableAutoCollectIncomingRequestAzureFunctions : _isAzureFunctions;\n    const extendedMetricsConfig = AutoCollectNativePerformance.parseEnabled(defaultClient.config.enableAutoCollectExtendedMetrics, defaultClient.config);\n    _isNativePerformance = extendedMetricsConfig.isEnabled;\n    _disabledExtendedMetrics = extendedMetricsConfig.disabledMetrics;\n\n}\n\n/**\n * Returns an object that is shared across all code handling a given request.\n * This can be used similarly to thread-local storage in other languages.\n * Properties set on this object will be available to telemetry processors.\n *\n * Do not store sensitive information here.\n * Custom properties set on this object can be exposed in a future SDK\n * release via outgoing HTTP headers.\n * This is to allow for correlating data cross-component.\n *\n * This method will return null if automatic dependency correlation is disabled.\n * @returns A plain object for request storage or null if automatic dependency correlation is disabled.\n */\nexport function getCorrelationContext(): CorrelationContextManager.CorrelationContext {\n    if (_isCorrelating) {\n        return CorrelationContextManager.CorrelationContextManager.getCurrentContext();\n    }\n\n    return null;\n}\n\n/**\n * **(Experimental!)**\n * Starts a fresh context or propagates the current internal one.\n */\nexport function startOperation(context: SpanContext, name: string): CorrelationContextManager.CorrelationContext | null;\nexport function startOperation(context: azureFunctionsTypes.Context, request: azureFunctionsTypes.HttpRequest): CorrelationContextManager.CorrelationContext | null;\nexport function startOperation(context: azureFunctionsTypes.Context, name: string): CorrelationContextManager.CorrelationContext | null;\nexport function startOperation(context: IncomingMessage | azureFunctionsTypes.HttpRequest, request?: never): CorrelationContextManager.CorrelationContext | null;\nexport function startOperation(context: azureFunctionsTypes.Context | (IncomingMessage | azureFunctionsTypes.HttpRequest) | (SpanContext), request?: azureFunctionsTypes.HttpRequest | string): CorrelationContextManager.CorrelationContext | null {\n    return CorrelationContextManager.CorrelationContextManager.startOperation(context, request);\n}\n\n/**\n * Returns a function that will get the same correlation context within its\n * function body as the code executing this function.\n * Use this method if automatic dependency correlation is not propagating\n * correctly to an asynchronous callback.\n */\nexport function wrapWithCorrelationContext<T extends Function>(fn: T, context?: CorrelationContextManager.CorrelationContext): T {\n    return CorrelationContextManager.CorrelationContextManager.wrapCallback(fn, context);\n}\n\n/**\n * The active configuration for global SDK behaviors, such as autocollection.\n */\nexport class Configuration {\n    // Convenience shortcut to ApplicationInsights.start\n    public static start = start;\n\n    /**\n     * Sets the distributed tracing modes. If W3C mode is enabled, W3C trace context\n     * headers (traceparent/tracestate) will be parsed in all incoming requests, and included in outgoing\n     * requests. In W3C mode, existing back-compatibility AI headers will also be parsed and included.\n     * Enabling W3C mode will not break existing correlation with other Application Insights instrumented\n     * services. Default=AI\n    */\n    public static setDistributedTracingMode(value: DistributedTracingModes) {\n        CorrelationIdManager.w3cEnabled = value === DistributedTracingModes.AI_AND_W3C;\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of console and logger tracking (enabled by default for third-party loggers only)\n     * @param value if true logger activity will be sent to Application Insights\n     * @param collectConsoleLog if true, logger autocollection will include console.log calls (default false)\n     * @returns {Configuration} this class\n     */\n    public static setAutoCollectConsole(value: boolean, collectConsoleLog: boolean = false) {\n        _isConsole = value;\n        _isConsoleLog = collectConsoleLog;\n        if (_isStarted) {\n            _console.enable(value, collectConsoleLog);\n        }\n\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of exception tracking (enabled by default)\n     * @param value if true uncaught exceptions will be sent to Application Insights\n     * @returns {Configuration} this class\n     */\n    public static setAutoCollectExceptions(value: boolean) {\n        _isExceptions = value;\n        if (_isStarted) {\n            _exceptions.enable(value);\n        }\n\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of performance tracking (enabled by default)\n     * @param value if true performance counters will be collected every second and sent to Application Insights\n     * @param collectExtendedMetrics if true, extended metrics counters will be collected every minute and sent to Application Insights\n     * @returns {Configuration} this class\n     */\n    public static setAutoCollectPerformance(value: boolean, collectExtendedMetrics: boolean | IDisabledExtendedMetrics = true) {\n        _isPerformance = value;\n        const extendedMetricsConfig = AutoCollectNativePerformance.parseEnabled(collectExtendedMetrics, defaultClient.config);\n        _isNativePerformance = extendedMetricsConfig.isEnabled;\n        _disabledExtendedMetrics = extendedMetricsConfig.disabledMetrics;\n        if (_isStarted) {\n            _performance.enable(value);\n            _nativePerformance.enable(extendedMetricsConfig.isEnabled, extendedMetricsConfig.disabledMetrics);\n        }\n\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of pre aggregated metrics tracking (enabled by default)\n     * @param value if true pre aggregated metrics will be collected every minute and sent to Application Insights\n     * @returns {Configuration} this class\n     */\n    public static setAutoCollectPreAggregatedMetrics(value: boolean) {\n        _isPreAggregatedMetrics = value;\n        if (_isStarted) {\n            _preAggregatedMetrics.enable(value);\n        }\n\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of request tracking (enabled by default)\n     * @param value if true HeartBeat metric data will be collected every 15 mintues and sent to Application Insights\n     * @returns {Configuration} this class\n     */\n    public static setAutoCollectHeartbeat(value: boolean) {\n        _isHeartBeat = value;\n        if (_isStarted) {\n            _heartbeat.enable(value);\n        }\n\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of Web snippet injection, this config is NOT exposed in documentation after version 2.3.5\n     * @deprecated, please use enableWebInstrumentation instead.\n     * @param value if true Web snippet will be tried to be injected in server response\n     * @param WebSnippetConnectionString if provided, web snippet injection will use this ConnectionString. Default to use the connectionString in Node.js app initialization\n     * @returns {Configuration} this class\n     */\n    public static enableAutoWebSnippetInjection(value: boolean, WebSnippetConnectionString?: string) {\n        _isSnippetInjection = value;\n        _webSnippetConnectionString = WebSnippetConnectionString;\n        if (_isStarted) {\n            _webSnippet.enable(value, _webSnippetConnectionString);\n        }\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of Web snippet injection\n     * @param value if true Web snippet will be tried to be injected in server response\n     * @param WebSnippetConnectionString if provided, web snippet injection will use this ConnectionString. Default to use the connectionString in Node.js app initialization\n     * @returns {Configuration} this class\n     */\n    public static enableWebInstrumentation(value: boolean, WebSnippetConnectionString?: string) {\n        _isSnippetInjection = value;\n        _webSnippetConnectionString = WebSnippetConnectionString;\n        if (_isStarted) {\n            _webSnippet.enable(value, _webSnippetConnectionString);\n        }\n\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of request tracking (enabled by default)\n     * @param value if true requests will be sent to Application Insights\n     * @returns {Configuration} this class\n     */\n    public static setAutoCollectRequests(value: boolean) {\n        _isRequests = value;\n        if (_isStarted) {\n            _serverRequests.enable(value);\n        }\n\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of dependency tracking (enabled by default)\n     * @param value if true dependencies will be sent to Application Insights\n     * @returns {Configuration} this class\n     */\n    public static setAutoCollectDependencies(value: boolean) {\n        _isDependencies = value;\n        if (_isStarted) {\n            _clientRequests.enable(value);\n        }\n\n        return Configuration;\n    }\n\n    /**\n     * Sets the state of automatic dependency correlation (enabled by default)\n     * @param value if true dependencies will be correlated with requests\n     * @param useAsyncHooks if true, forces use of experimental async_hooks module to provide correlation. If false, instead uses only patching-based techniques. If left blank, the best option is chosen for you based on your version of Node.js.\n     * @returns {Configuration} this class\n     */\n    public static setAutoDependencyCorrelation(value: boolean, useAsyncHooks?: boolean) {\n        _isCorrelating = value;\n        _forceClsHooked = useAsyncHooks;\n        if (_isStarted) {\n            _serverRequests.useAutoCorrelation(value, useAsyncHooks);\n        }\n\n        return Configuration;\n    }\n\n    /**\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\n     * Note that this method only applies to the default client. Disk-backed retry caching is disabled by default for additional clients.\n     * For enable for additional clients, use client.channel.setUseDiskRetryCaching(true).\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\n     * @param value if true events that occured while client is offline will be cached on disk\n     * @param resendInterval The wait interval for resending cached events.\n     * @param maxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\n     * @returns {Configuration} this class\n     */\n    public static setUseDiskRetryCaching(value: boolean, resendInterval?: number, maxBytesOnDisk?: number) {\n        _isDiskRetry = value;\n        _diskRetryInterval = resendInterval;\n        _diskRetryMaxBytes = maxBytesOnDisk;\n        if (defaultClient && defaultClient.channel) {\n            defaultClient.channel.setUseDiskRetryCaching(_isDiskRetry, _diskRetryInterval, _diskRetryMaxBytes);\n        }\n        return Configuration;\n    }\n\n    /**\n     * Enables debug and warning logging for AppInsights itself.\n     * @param enableDebugLogging if true, enables debug logging\n     * @param enableWarningLogging if true, enables warning logging\n     * @returns {Configuration} this class\n     */\n    public static setInternalLogging(enableDebugLogging = false, enableWarningLogging = true) {\n        Logging.enableDebug = enableDebugLogging;\n        Logging.disableWarnings = !enableWarningLogging;\n        return Configuration;\n    }\n\n    /**\n     * Enable automatic incoming request tracking when using Azure Functions\n     * @param value if true auto collection of incoming requests will be enabled\n     * @returns {Configuration} this class\n     */\n    public static setAutoCollectIncomingRequestAzureFunctions(value: boolean) {\n        _isAzureFunctions = value;\n        if (_isStarted) {\n            _azureFunctions.enable(value);\n        }\n        return Configuration;\n    }\n\n    /**\n     * Enables communication with Application Insights Live Metrics.\n     * @param enable if true, enables communication with the live metrics service\n     */\n    public static setSendLiveMetrics(enable = false) {\n        if (!defaultClient) {\n            // Need a defaultClient so that we can add the QPS telemetry processor to it\n            Logging.warn(\"Live metrics client cannot be setup without the default client\");\n            return Configuration;\n        }\n\n        if (!liveMetricsClient && enable) {\n            // No qps client exists. Create one and prepare it to be enabled at .start()\n            liveMetricsClient = new QuickPulseClient(defaultClient.config, defaultClient.context, defaultClient.getAuthorizationHandler);\n            _performanceLiveMetrics = new AutoCollectPerformance(liveMetricsClient as any, 1000, true);\n            liveMetricsClient.addCollector(_performanceLiveMetrics);\n            defaultClient.quickPulseClient = liveMetricsClient; // Need this so we can forward all manual tracks to live metrics via PerformanceMetricsTelemetryProcessor\n        } else if (liveMetricsClient) {\n            // qps client already exists; enable/disable it\n            liveMetricsClient.enable(enable);\n        }\n        _isSendingLiveMetrics = enable;\n        return Configuration;\n    }\n}\n\n/**\n * Disposes the default client and all the auto collectors so they can be reinitialized with different configuration\n*/\nexport function dispose() {\n    CorrelationIdManager.w3cEnabled = true; // reset to default\n    defaultClient = null;\n    _isStarted = false;\n    if (_console) {\n        _console.dispose();\n    }\n    if (_exceptions) {\n        _exceptions.dispose();\n    }\n    if (_performance) {\n        _performance.dispose();\n    }\n    if (_preAggregatedMetrics) {\n        _preAggregatedMetrics.dispose();\n    }\n    if (_heartbeat) {\n        _heartbeat.dispose();\n    }\n    if (_webSnippet) {\n        _webSnippet.dispose();\n    }\n    if (_nativePerformance) {\n        _nativePerformance.dispose();\n    }\n    if (_serverRequests) {\n        _serverRequests.dispose();\n    }\n    if (_clientRequests) {\n        _clientRequests.dispose();\n    }\n    if (liveMetricsClient) {\n        liveMetricsClient.enable(false);\n        _isSendingLiveMetrics = false;\n        liveMetricsClient = undefined;\n    }\n    if (_azureFunctions) {\n        _azureFunctions.dispose();\n    }\n}"]}