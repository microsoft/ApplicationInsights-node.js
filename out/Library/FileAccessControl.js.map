{"version":3,"file":"FileAccessControl.js","sourceRoot":"","sources":["../../Library/FileAccessControl.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require(\"fs\");\nimport os = require(\"os\");\nimport child_process = require(\"child_process\");\n\nimport Logging = require(\"./Logging\");\n\n\nexport class FileAccessControl {\n    private static TAG = \"FileAccessControl\";\n\n    private static ICACLS_PATH = `${process.env.systemdrive}/windows/system32/icacls.exe`;\n    private static POWERSHELL_PATH = `${process.env.systemdrive}/windows/system32/windowspowershell/v1.0/powershell.exe`;\n    private static ACLED_DIRECTORIES: { [id: string]: boolean } = {};\n    private static ACL_IDENTITY: string = null;\n    private static OS_FILE_PROTECTION_CHECKED = false;\n    public static OS_PROVIDES_FILE_PROTECTION = false;\n    public static USE_ICACLS = os.type() === \"Windows_NT\";\n\n\n    // Check if file access control could be enabled\n    public static checkFileProtection() {\n        if (!FileAccessControl.OS_PROVIDES_FILE_PROTECTION && !FileAccessControl.OS_FILE_PROTECTION_CHECKED) {\n            FileAccessControl.OS_FILE_PROTECTION_CHECKED = true;\n            // Node's chmod levels do not appropriately restrict file access on Windows\n            // Use the built-in command line tool ICACLS on Windows to properly restrict\n            // access to the temporary directory used for disk retry mode.\n            if (FileAccessControl.USE_ICACLS) {\n                // This should be async - but it's currently safer to have this synchronous\n                // This guarantees we can immediately fail setDiskRetryMode if we need to\n                try {\n                    FileAccessControl.OS_PROVIDES_FILE_PROTECTION = fs.existsSync(FileAccessControl.ICACLS_PATH);\n                } catch (e) {\n                    // Ignore errors\n                 }\n                if (!FileAccessControl.OS_PROVIDES_FILE_PROTECTION) {\n                    Logging.warn(FileAccessControl.TAG, \"Could not find ICACLS in expected location! This is necessary to use disk retry mode on Windows.\")\n                }\n            } else {\n                // chmod works everywhere else\n                FileAccessControl.OS_PROVIDES_FILE_PROTECTION = true;\n            }\n        }\n    }\n\n    public static async applyACLRules(directory: string): Promise<void> {\n        if (FileAccessControl.USE_ICACLS) {\n            if (FileAccessControl.ACLED_DIRECTORIES[directory] === undefined) {\n                // Avoid multiple calls race condition by setting ACLED_DIRECTORIES to false for this directory immediately\n                // If batches are being failed faster than the processes spawned below return, some data won't be stored to disk\n                // This is better than the alternative of potentially infinitely spawned processes\n                FileAccessControl.ACLED_DIRECTORIES[directory] = false;\n                try {\n                    // Restrict this directory to only current user and administrator access\n                    let identity = await this._getACLIdentity();\n                    await this._runICACLS(this._getACLArguments(directory, identity));\n                    FileAccessControl.ACLED_DIRECTORIES[directory] = true;\n                }\n                catch (ex) {\n                    FileAccessControl.ACLED_DIRECTORIES[directory] = false; // false is used to cache failed (vs undefined which is \"not yet tried\")\n                    throw ex;\n                }\n            } else {\n                if (!FileAccessControl.ACLED_DIRECTORIES[directory]) {\n                    throw new Error(\"Setting ACL restrictions did not succeed (cached result)\");\n                }\n            }\n        }\n    }\n\n    public static applyACLRulesSync(directory: string) {\n        if (FileAccessControl.USE_ICACLS) {\n            // For performance, only run ACL rules if we haven't already during this session\n            if (FileAccessControl.ACLED_DIRECTORIES[directory] === undefined) {\n                this._runICACLSSync(this._getACLArguments(directory, this._getACLIdentitySync()));\n                FileAccessControl.ACLED_DIRECTORIES[directory] = true; // If we get here, it succeeded. _runIACLSSync will throw on failures\n                return;\n            } else if (!FileAccessControl.ACLED_DIRECTORIES[directory]) { // falsy but not undefined\n                throw new Error(\"Setting ACL restrictions did not succeed (cached result)\");\n            }\n        }\n    }\n\n    private static _runICACLS(args: string[]): Promise<void> {\n        return new Promise((resolve, reject) => {\n            var aclProc = child_process.spawn(FileAccessControl.ICACLS_PATH, args, <any>{ windowsHide: true });\n            aclProc.on(\"error\", (e: Error) => reject(e));\n            aclProc.on(\"close\", (code: number, signal: string) => {\n                if (code === 0) {\n                    resolve();\n                }\n                else {\n                    reject(new Error(`Setting ACL restrictions did not succeed (ICACLS returned code ${code})`));\n                }\n            });\n        });\n    }\n\n    private static _runICACLSSync(args: string[]) {\n        // Some very old versions of Node (< 0.11) don't have this\n        if (child_process.spawnSync) {\n            var aclProc = child_process.spawnSync(FileAccessControl.ICACLS_PATH, args, <any>{ windowsHide: true });\n            if (aclProc.error) {\n                throw aclProc.error;\n            } else if (aclProc.status !== 0) {\n                throw new Error(`Setting ACL restrictions did not succeed (ICACLS returned code ${aclProc.status})`);\n            }\n        } else {\n            throw new Error(\"Could not synchronously call ICACLS under current version of Node.js\");\n        }\n    }\n\n    private static _getACLIdentity(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (FileAccessControl.ACL_IDENTITY) {\n                resolve(FileAccessControl.ACL_IDENTITY);\n            }\n            var psProc = child_process.spawn(FileAccessControl.POWERSHELL_PATH,\n                [\"-Command\", \"[System.Security.Principal.WindowsIdentity]::GetCurrent().Name\"], <any>{\n                    windowsHide: true,\n                    stdio: [\"ignore\", \"pipe\", \"pipe\"] // Needed to prevent hanging on Win 7\n                });\n            let data = \"\";\n            psProc.stdout.on(\"data\", (d: string) => data += d);\n            psProc.on(\"error\", (e: Error) => reject(e));\n            psProc.on(\"close\", (code: number, signal: string) => {\n                FileAccessControl.ACL_IDENTITY = data && data.trim();\n                if (code === 0) {\n                    resolve(FileAccessControl.ACL_IDENTITY);\n                }\n                else {\n                    reject(new Error(`Getting ACL identity did not succeed (PS returned code ${code})`));\n                }\n            });\n        });\n    }\n\n    private static _getACLIdentitySync() {\n        if (FileAccessControl.ACL_IDENTITY) {\n            return FileAccessControl.ACL_IDENTITY;\n        }\n        // Some very old versions of Node (< 0.11) don't have this\n        if (child_process.spawnSync) {\n            var psProc = child_process.spawnSync(FileAccessControl.POWERSHELL_PATH,\n                [\"-Command\", \"[System.Security.Principal.WindowsIdentity]::GetCurrent().Name\"], <any>{\n                    windowsHide: true,\n                    stdio: [\"ignore\", \"pipe\", \"pipe\"] // Needed to prevent hanging on Win 7\n                });\n            if (psProc.error) {\n                throw psProc.error;\n            } else if (psProc.status !== 0) {\n                throw new Error(`Getting ACL identity did not succeed (PS returned code ${psProc.status})`);\n            }\n            FileAccessControl.ACL_IDENTITY = psProc.stdout && psProc.stdout.toString().trim();\n            return FileAccessControl.ACL_IDENTITY;\n        } else {\n            throw new Error(\"Could not synchronously get ACL identity under current version of Node.js\");\n        }\n    }\n\n    private static _getACLArguments(directory: string, identity: string) {\n        return [directory,\n            \"/grant\", \"*S-1-5-32-544:(OI)(CI)F\", // Full permission for Administrators\n            \"/grant\", `${identity}:(OI)(CI)F`, // Full permission for current user\n            \"/inheritance:r\"]; // Remove all inherited permissions\n    }\n}\n"]}