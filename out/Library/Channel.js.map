{"version":3,"file":"Channel.js","sourceRoot":"","sources":["../../Library/Channel.ts"],"names":[],"mappings":";AACA,mCAAsC;AAEtC,6BAAgC;AAEhC;IAWI,iBAAY,UAAyB,EAAE,YAA0B,EAAE,kBAAgC,EAAE,MAAc;QAC/G,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED;;;;;;;OAOG;IACI,wCAAsB,GAA7B,UAA8B,KAAc,EAAE,cAAuB,EAAE,cAAuB;QAC1F,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;IACzE,CAAC;IAED;;OAEG;IACI,sBAAI,GAAX,UAAY,QAAqC;QAAjD,iBA8BC;QA5BG,mDAAmD;QACnD,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;YACpB,wBAAwB;YACxB,OAAO;SACV;QAED,iBAAiB;QACjB,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACrD,OAAO;SACV;QAED,sBAAsB;QACtB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE5B,kEAAkE;QAClE,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;YAC7C,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACxB,OAAO;SACV;QAED,mEAAmE;QACnE,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACjD,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;gBAC7B,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAC3B,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;SAClC;IACL,CAAC;IAED;;OAEG;IACI,6BAAW,GAAlB,UAAmB,cAAuB,EAAE,QAA8B;QACtE,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,aAAa,EAAE;YAChB,cAAc;YACd,IAAI,cAAc,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvC,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;oBAChC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;iBACnC;aACJ;iBAAM;gBACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;aAC7C;SACJ;QAED,4CAA4C;QAC5C,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,IAAI,CAAC;QAE3B,eAAe;QACf,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAClC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,aAAa,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;YACjD,QAAQ,CAAC,iBAAiB,CAAC,CAAC;SAC/B;IACL,CAAC;IACL,cAAC;AAAD,CAAC,AA/FD,IA+FC;AAED,iBAAS,OAAO,CAAC","sourcesContent":["import Contracts = require(\"../Declarations/Contracts\");\nimport Logging = require(\"./Logging\");\nimport Sender = require(\"./Sender\");\nimport Util = require(\"./Util\");\n\nclass Channel {\n    protected _lastSend: number;\n    protected _timeoutHandle: any;\n\n    protected _isDisabled: () => boolean;\n    protected _getBatchSize: () => number;\n    protected _getBatchIntervalMs: () => number;\n    \n    public _sender: Sender;\n    public _buffer: Contracts.EnvelopeTelemetry[];\n\n    constructor(isDisabled: () => boolean, getBatchSize: () => number, getBatchIntervalMs: () => number, sender: Sender) {\n        this._buffer = [];\n        this._lastSend = 0;\n        this._isDisabled = isDisabled;\n        this._getBatchSize = getBatchSize;\n        this._getBatchIntervalMs = getBatchIntervalMs;\n        this._sender = sender;\n    }\n\n    /**\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\n     * @param value if true events that occurred while client is offline will be cached on disk\n     * @param resendInterval The wait interval for resending cached events.\n     * @param maxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\n     * @returns {Configuration} this class\n     */\n    public setUseDiskRetryCaching(value: boolean, resendInterval?: number, maxBytesOnDisk?: number) {\n        this._sender.setDiskRetryMode(value, resendInterval, maxBytesOnDisk);\n    }\n\n    /**\n     * Add a telemetry item to the send buffer\n     */\n    public send(envelope: Contracts.EnvelopeTelemetry) {\n\n        // if master off switch is set, don't send any data\n        if (this._isDisabled()) {\n            // Do not send/save data\n            return;\n        }\n\n        // validate input\n        if (!envelope) {\n            Logging.warn(\"Cannot send null/undefined telemetry\");\n            return;\n        }\n\n        // enqueue the payload\n        this._buffer.push(envelope);\n\n        // flush if we would exceed the max-size limit by adding this item\n        if (this._buffer.length >= this._getBatchSize()) {\n            this.triggerSend(false);\n            return;\n        }\n\n        // ensure an invocation timeout is set if anything is in the buffer\n        if (!this._timeoutHandle && this._buffer.length > 0) {\n            this._timeoutHandle = setTimeout(() => {\n                this._timeoutHandle = null;\n                this.triggerSend(false);\n            }, this._getBatchIntervalMs());\n        }\n    }\n\n    /**\n     * Immediately send buffered data\n     */\n    public triggerSend(isNodeCrashing: boolean, callback?: (v: string) => void) {\n        let bufferIsEmpty = this._buffer.length < 1;\n        if (!bufferIsEmpty) {\n            // invoke send\n            if (isNodeCrashing || Util.isNodeExit) {\n                this._sender.saveOnCrash(this._buffer);\n                if (typeof callback === \"function\") {\n                    callback(\"data saved on crash\");\n                }\n            } else {\n                this._sender.send(this._buffer, callback);\n            }\n        }\n\n        // update lastSend time to enable throttling\n        this._lastSend = +new Date;\n\n        // clear buffer\n        this._buffer = [];\n        clearTimeout(this._timeoutHandle);\n        this._timeoutHandle = null;\n        if (bufferIsEmpty && typeof callback === \"function\") {\n            callback(\"no data to send\");\n        }\n    }\n}\n\nexport = Channel;\n"]}