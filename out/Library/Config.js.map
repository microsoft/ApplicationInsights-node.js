{"version":3,"file":"Config.js","sourceRoot":"","sources":["../../Library/Config.ts"],"names":[],"mappings":"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","sourcesContent":["import azureCoreAuth = require(\"@azure/core-auth\");\n\nimport CorrelationIdManager = require(\"./CorrelationIdManager\");\nimport ConnectionStringParser = require(\"./ConnectionStringParser\");\nimport Logging = require(\"./Logging\");\nimport Constants = require(\"../Declarations/Constants\");\nimport http = require(\"http\");\nimport https = require(\"https\");\nimport url = require(\"url\");\nimport { JsonConfig } from \"./JsonConfig\";\nimport { IConfig, IWebInstrumentationConfig } from \"../Declarations/Interfaces\";\nimport { DistributedTracingModes } from \"../applicationinsights\";\nimport { IDisabledExtendedMetrics } from \"../AutoCollection/NativePerformance\";\n\nclass Config implements IConfig {\n\n    public static ENV_azurePrefix = \"APPSETTING_\"; // Azure adds this prefix to all environment variables\n    public static ENV_iKey = \"APPINSIGHTS_INSTRUMENTATIONKEY\"; // This key is provided in the readme\n    public static legacy_ENV_iKey = \"APPINSIGHTS_INSTRUMENTATION_KEY\";\n    public static ENV_profileQueryEndpoint = \"APPINSIGHTS_PROFILE_QUERY_ENDPOINT\";\n    public static ENV_quickPulseHost = \"APPINSIGHTS_QUICKPULSE_HOST\";\n\n    // IConfig properties\n    public endpointUrl: string;\n    public maxBatchSize: number;\n    public maxBatchIntervalMs: number;\n    public disableAppInsights: boolean;\n    public samplingPercentage: number;\n    public correlationIdRetryIntervalMs: number;\n    public correlationHeaderExcludedDomains: string[];\n    public proxyHttpUrl: string;\n    public proxyHttpsUrl: string;\n    public httpAgent: http.Agent;\n    public httpsAgent: https.Agent;\n    public ignoreLegacyHeaders: boolean;\n    public aadTokenCredential?: azureCoreAuth.TokenCredential;\n    public enableAutoCollectConsole: boolean;\n    public enableAutoCollectExceptions: boolean;\n    public enableAutoCollectPerformance: boolean;\n    public enableAutoCollectExternalLoggers: boolean;\n    public enableAutoCollectPreAggregatedMetrics: boolean;\n    public enableAutoCollectHeartbeat: boolean;\n    public enableAutoCollectRequests: boolean;\n    public enableAutoCollectDependencies: boolean;\n    public enableAutoDependencyCorrelation: boolean;\n    public enableAutoCollectIncomingRequestAzureFunctions: boolean;\n    public enableSendLiveMetrics: boolean;\n    public enableUseDiskRetryCaching: boolean;\n    public enableUseAsyncHooks: boolean;\n    public distributedTracingMode: DistributedTracingModes;\n    public enableAutoCollectExtendedMetrics: boolean | IDisabledExtendedMetrics;\n    public enableResendInterval: number;\n    public enableMaxBytesOnDisk: number;\n    public enableInternalDebugLogging: boolean;\n    public enableInternalWarningLogging: boolean;\n    public disableAllExtendedMetrics: boolean;\n    public disableStatsbeat: boolean;\n    public extendedMetricDisablers: string;\n    public quickPulseHost: string;\n    public enableWebInstrumentation: boolean;\n    public webInstrumentationConfig: IWebInstrumentationConfig[];\n    public webInstrumentationSrc: string;\n    // To Be deprecated.\n    public enableAutoWebSnippetInjection: boolean;\n\n    public correlationId: string; // TODO: Should be private\n    private _connectionString: string;\n    private _endpointBase: string = Constants.DEFAULT_BREEZE_ENDPOINT;\n    private _profileQueryEndpoint: string;\n    private _instrumentationKey: string;\n    public _webInstrumentationConnectionString: string;\n \n    constructor(setupString?: string) {\n        // Load config values from env variables and JSON if available\n        this._mergeConfig();\n        const connectionStringEnv: string | undefined = this._connectionString;\n        const csCode = ConnectionStringParser.parse(setupString);\n        const csEnv = ConnectionStringParser.parse(connectionStringEnv);\n        const iKeyCode = !csCode.instrumentationkey && Object.keys(csCode).length > 0\n            ? null // CS was valid but instrumentation key was not provided, null and grab from env var\n            : setupString; // CS was invalid, so it must be an ikey\n\n        const instrumentationKeyEnv: string | undefined = this._instrumentationKey;\n        this.instrumentationKey = csCode.instrumentationkey || iKeyCode /* === instrumentationKey */ || csEnv.instrumentationkey || instrumentationKeyEnv;\n        let endpoint = `${this.endpointUrl || csCode.ingestionendpoint || csEnv.ingestionendpoint || this._endpointBase}`;\n        if (endpoint.endsWith(\"/\")) {\n            // Remove extra '/' if present\n            endpoint = endpoint.slice(0, -1);\n        }\n        this.endpointUrl = `${endpoint}/v2.1/track`;\n        this.maxBatchSize = this.maxBatchSize || 250;\n        this.maxBatchIntervalMs = this.maxBatchIntervalMs || 15000;\n        this.disableAppInsights = this.disableAppInsights || false;\n        this.samplingPercentage = this.samplingPercentage || 100;\n        this.correlationIdRetryIntervalMs = this.correlationIdRetryIntervalMs || 30 * 1000;\n        this.enableWebInstrumentation = this.enableWebInstrumentation || this.enableAutoWebSnippetInjection || false;\n        this.webInstrumentationConfig = this.webInstrumentationConfig || null;\n        this.enableAutoWebSnippetInjection = this.enableWebInstrumentation;\n        this.correlationHeaderExcludedDomains =\n            this.correlationHeaderExcludedDomains ||\n            [\n                \"*.core.windows.net\",\n                \"*.core.chinacloudapi.cn\",\n                \"*.core.cloudapi.de\",\n                \"*.core.usgovcloudapi.net\",\n                \"*.core.microsoft.scloud\",\n                \"*.core.eaglex.ic.gov\"\n            ];\n\n        this.ignoreLegacyHeaders = this.ignoreLegacyHeaders || false;\n        this.profileQueryEndpoint = csCode.ingestionendpoint || csEnv.ingestionendpoint || process.env[Config.ENV_profileQueryEndpoint] || this._endpointBase;\n        this.quickPulseHost = this.quickPulseHost || csCode.liveendpoint || csEnv.liveendpoint || process.env[Config.ENV_quickPulseHost] || Constants.DEFAULT_LIVEMETRICS_HOST;\n        this.webInstrumentationConnectionString = this.webInstrumentationConnectionString || this._webInstrumentationConnectionString || \"\";\n        this.webSnippetConnectionString = this.webInstrumentationConnectionString;\n        // Parse quickPulseHost if it starts with http(s)://\n        if (this.quickPulseHost.match(/^https?:\\/\\//)) {\n            this.quickPulseHost = new url.URL(this.quickPulseHost).host;\n        }\n    }\n\n    public set profileQueryEndpoint(endpoint: string) {\n        this._profileQueryEndpoint = endpoint;\n        this.correlationId = CorrelationIdManager.correlationIdPrefix;\n    }\n\n    public get profileQueryEndpoint() {\n        return this._profileQueryEndpoint;\n    }\n\n    public set instrumentationKey(iKey: string) {\n        if (!Config._validateInstrumentationKey(iKey)) {\n            Logging.warn(\"An invalid instrumentation key was provided. There may be resulting telemetry loss\", this.instrumentationKey);\n        }\n        this._instrumentationKey = iKey;\n    }\n\n    public get instrumentationKey(): string {\n        return this._instrumentationKey;\n    }\n\n    public set webSnippetConnectionString(connectionString: string) {\n        this._webInstrumentationConnectionString = connectionString;\n    }\n\n    public get webSnippetConnectionString(): string {\n        return this._webInstrumentationConnectionString;\n    }\n\n    public set webInstrumentationConnectionString(connectionString: string) {\n        this._webInstrumentationConnectionString = connectionString;\n    }\n\n    public get webInstrumentationConnectionString() {\n        return this._webInstrumentationConnectionString;\n    }\n\n    private _mergeConfig() {\n        let jsonConfig = JsonConfig.getInstance();\n        this._connectionString = jsonConfig.connectionString;\n        this._instrumentationKey = jsonConfig.instrumentationKey;\n        this.correlationHeaderExcludedDomains = jsonConfig.correlationHeaderExcludedDomains;\n        this.correlationIdRetryIntervalMs = jsonConfig.correlationIdRetryIntervalMs;\n        this.disableAllExtendedMetrics = jsonConfig.disableAllExtendedMetrics;\n        this.disableAppInsights = jsonConfig.disableAppInsights;\n        this.disableStatsbeat = jsonConfig.disableStatsbeat;\n        this.distributedTracingMode = jsonConfig.distributedTracingMode;\n        this.enableAutoCollectConsole = jsonConfig.enableAutoCollectConsole;\n        this.enableAutoCollectDependencies = jsonConfig.enableAutoCollectDependencies;\n        this.enableAutoCollectIncomingRequestAzureFunctions = jsonConfig.enableAutoCollectIncomingRequestAzureFunctions;\n        this.enableAutoCollectExceptions = jsonConfig.enableAutoCollectExceptions;\n        this.enableAutoCollectExtendedMetrics = jsonConfig.enableAutoCollectExtendedMetrics;\n        this.enableAutoCollectExternalLoggers = jsonConfig.enableAutoCollectExternalLoggers;\n        this.enableAutoCollectHeartbeat = jsonConfig.enableAutoCollectHeartbeat;\n        this.enableAutoCollectPerformance = jsonConfig.enableAutoCollectPerformance;\n        this.enableAutoCollectPreAggregatedMetrics = jsonConfig.enableAutoCollectPreAggregatedMetrics;\n        this.enableAutoCollectRequests = jsonConfig.enableAutoCollectRequests;\n        this.enableAutoDependencyCorrelation = jsonConfig.enableAutoDependencyCorrelation;\n        this.enableInternalDebugLogging = jsonConfig.enableInternalDebugLogging;\n        this.enableInternalWarningLogging = jsonConfig.enableInternalWarningLogging;\n        this.enableResendInterval = jsonConfig.enableResendInterval;\n        this.enableMaxBytesOnDisk = jsonConfig.enableMaxBytesOnDisk;\n        this.enableSendLiveMetrics = jsonConfig.enableSendLiveMetrics;\n        this.enableUseAsyncHooks = jsonConfig.enableUseAsyncHooks;\n        this.enableUseDiskRetryCaching = jsonConfig.enableUseDiskRetryCaching;\n        this.endpointUrl = jsonConfig.endpointUrl;\n        this.extendedMetricDisablers = jsonConfig.extendedMetricDisablers;\n        this.ignoreLegacyHeaders = jsonConfig.ignoreLegacyHeaders;\n        this.maxBatchIntervalMs = jsonConfig.maxBatchIntervalMs;\n        this.maxBatchSize = jsonConfig.maxBatchSize;\n        this.proxyHttpUrl = jsonConfig.proxyHttpUrl;\n        this.proxyHttpsUrl = jsonConfig.proxyHttpsUrl;\n        this.quickPulseHost = jsonConfig.quickPulseHost;\n        this.samplingPercentage = jsonConfig.samplingPercentage;\n        this.enableWebInstrumentation = jsonConfig.enableWebInstrumentation;\n        this._webInstrumentationConnectionString = jsonConfig.webInstrumentationConnectionString;\n        this.webInstrumentationConfig = jsonConfig.webInstrumentationConfig;\n        this.webInstrumentationSrc = jsonConfig.webInstrumentationSrc;\n    }\n\n    /**\n    * Validate UUID Format\n    * Specs taken from breeze repo\n    * The definition of a VALID instrumentation key is as follows:\n    * Not none\n    * Not empty\n    * Every character is a hex character [0-9a-f]\n    * 32 characters are separated into 5 sections via 4 dashes\n    * First section has 8 characters\n    * Second section has 4 characters\n    * Third section has 4 characters\n    * Fourth section has 4 characters\n    * Fifth section has 12 characters\n    */\n    private static _validateInstrumentationKey(iKey: string): boolean {\n        const UUID_Regex = \"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\";\n        const regexp = new RegExp(UUID_Regex);\n        return regexp.test(iKey);\n    }\n}\n\nexport = Config;\n"]}