{"version":3,"file":"InternalAzureLogger.js","sourceRoot":"","sources":["../../Library/InternalAzureLogger.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require(\"fs\");\nimport os = require(\"os\");\nimport path = require(\"path\");\nimport FileSystemHelper = require(\"./FileSystemHelper\");\n\n\nclass InternalAzureLogger {\n\n    private static _instance: InternalAzureLogger;\n    public maxHistory: number;\n    public maxSizeBytes: number;\n\n    private TAG = \"Logger\";\n    private _cleanupTimeOut = 60 * 30 * 1000; // 30 minutes;\n    private static _fileCleanupTimer: NodeJS.Timer = null;\n    private _tempDir: string;\n    public _logFileName: string;\n    private _fileFullPath: string;\n    private _backUpNameFormat: string;\n    private _logToFile = false;\n    private _logToConsole = true;\n\n\n    constructor() {\n        let logDestination = process.env.APPLICATIONINSIGHTS_LOG_DESTINATION; // destination can be one of file, console or file+console\n        if (logDestination == \"file+console\") {\n            this._logToFile = true;\n        }\n        if (logDestination == \"file\") {\n            this._logToFile = true;\n            this._logToConsole = false;\n        }\n        this.maxSizeBytes = 50000;\n        this.maxHistory = 1;\n        this._logFileName = \"applicationinsights.log\";\n\n        // If custom path not provided use temp folder, /tmp for *nix and USERDIR/AppData/Local/Temp for Windows\n        let logFilePath = process.env.APPLICATIONINSIGHTS_LOGDIR;\n        if (!logFilePath) {\n            this._tempDir = path.join(os.tmpdir(), \"appInsights-node\");\n        }\n        else {\n            if (path.isAbsolute(logFilePath)) {\n                this._tempDir = logFilePath;\n            }\n            else {\n                this._tempDir = path.join(process.cwd(), logFilePath);\n            }\n        }\n        this._fileFullPath = path.join(this._tempDir, this._logFileName);\n        this._backUpNameFormat = \".\" + this._logFileName; // {currentime}.applicationinsights.log\n\n        if (this._logToFile) {\n            if (!InternalAzureLogger._fileCleanupTimer) {\n                InternalAzureLogger._fileCleanupTimer = setInterval(() => { this._fileCleanupTask(); }, this._cleanupTimeOut);\n                InternalAzureLogger._fileCleanupTimer.unref();\n            }\n        }\n    }\n\n    public info(message?: any, ...optionalParams: any[]) {\n        let args = message ? [message, ...optionalParams] : optionalParams;\n        if (this._logToFile) {\n            this._storeToDisk(args);\n        }\n        if (this._logToConsole) {\n            console.info(...args);\n        }\n    }\n\n    public warning(message?: any, ...optionalParams: any[]) {\n        let args = message ? [message, ...optionalParams] : optionalParams;\n        if (this._logToFile) {\n            this._storeToDisk(args);\n        }\n        if (this._logToConsole) {\n            console.warn(...args);\n        }\n    }\n\n    static getInstance() {\n        if (!InternalAzureLogger._instance) {\n            InternalAzureLogger._instance = new InternalAzureLogger();\n        }\n        return InternalAzureLogger._instance;\n    }\n\n    private async _storeToDisk(args: any): Promise<void> {\n        let data = args + \"\\r\\n\";\n\n        try {\n            await FileSystemHelper.confirmDirExists(this._tempDir);\n        }\n        catch (err) {\n            console.log(this.TAG, \"Failed to create directory for log file: \" + (err && err.message));\n            return;\n        }\n        try {\n            await FileSystemHelper.accessAsync(this._fileFullPath, fs.constants.F_OK);\n        }\n        catch (appendError) {\n            // No file create one\n            try {\n                await FileSystemHelper.appendFileAsync(this._fileFullPath, data);\n                return;\n            }\n            catch (err) {\n                console.log(this.TAG, \"Failed to put log into file: \" + (appendError && appendError.message));\n                return;\n            }\n        }\n        try {\n            // Check size\n            let size = await FileSystemHelper.getShallowFileSize(this._fileFullPath);\n            if (size > this.maxSizeBytes) {\n                await this._createBackupFile(data);\n            }\n            else {\n                await FileSystemHelper.appendFileAsync(this._fileFullPath, data);\n            }\n        }\n        catch (err) {\n            console.log(this.TAG, \"Failed to create backup file: \" + (err && err.message));\n        }\n    }\n\n    private async _createBackupFile(data: string): Promise<void> {\n        try {\n            let buffer = await FileSystemHelper.readFileAsync(this._fileFullPath);\n            let backupPath = path.join(this._tempDir, new Date().getTime() + \".\" + this._logFileName);\n            await FileSystemHelper.writeFileAsync(backupPath, buffer);\n        }\n        catch (err) {\n            console.log(\"Failed to generate backup log file\", err);\n        }\n        finally {\n            // Store logs\n            FileSystemHelper.writeFileAsync(this._fileFullPath, data);\n        }\n    }\n\n    private async _fileCleanupTask(): Promise<void> {\n        try {\n            let files = await FileSystemHelper.readdirAsync(this._tempDir);\n            // Filter only backup files\n            files = files.filter(f => path.basename(f).indexOf(this._backUpNameFormat) > -1);\n            // Sort by creation date\n            files.sort((a: string, b: String) => {\n                // Check expiration\n                let aCreationDate: Date = new Date(parseInt(a.split(this._backUpNameFormat)[0]));\n                let bCreationDate: Date = new Date(parseInt(b.split(this._backUpNameFormat)[0]));\n                if (aCreationDate < bCreationDate) {\n                    return -1;\n                }\n                if (aCreationDate >= bCreationDate) {\n                    return 1;\n                }\n            });\n            let totalFiles = files.length;\n            for (let i = 0; i < totalFiles - this.maxHistory; i++) {\n                let pathToDelete = path.join(this._tempDir, files[i]);\n                await FileSystemHelper.unlinkAsync(pathToDelete);\n            }\n        }\n        catch (err) {\n            console.log(this.TAG, \"Failed to cleanup log files: \" + (err && err.message));\n        }\n    }\n}\n\nexport = InternalAzureLogger;"]}