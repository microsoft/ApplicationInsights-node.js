{"version":3,"file":"FileSystemHelper.js","sourceRoot":"","sources":["../../Library/FileSystemHelper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uBAAyB;AACzB,2BAA8B;AAC9B,6BAAiC;AAEpB,QAAA,SAAS,GAAG,gBAAS,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AAC/B,QAAA,UAAU,GAAG,gBAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;AACjC,QAAA,UAAU,GAAG,gBAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;AACjC,QAAA,WAAW,GAAG,gBAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;AACnC,QAAA,eAAe,GAAG,gBAAS,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;AAC3C,QAAA,cAAc,GAAG,gBAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;AACzC,QAAA,aAAa,GAAG,gBAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AACvC,QAAA,YAAY,GAAG,gBAAS,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AACrC,QAAA,WAAW,GAAG,gBAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;AAEhD;;GAEG;AACI,IAAM,gBAAgB,GAAG,UAAO,SAAiB;;;;;;gBAElC,qBAAM,kBAAU,CAAC,SAAS,CAAC,EAAA;;gBAAnC,KAAK,GAAG,SAA2B;gBACzC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE;oBACtB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;iBAC3D;;;;qBAEG,CAAA,KAAG,IAAI,KAAG,CAAC,IAAI,KAAK,QAAQ,CAAA,EAA5B,wBAA4B;;;;gBAExB,qBAAM,kBAAU,CAAC,SAAS,CAAC,EAAA;;gBAA3B,SAA2B,CAAC;;;;gBAE5B,IAAI,UAAQ,IAAI,UAAQ,CAAC,IAAI,KAAK,QAAQ,EAAE;oBACxC,2CAA2C;oBAC3C,MAAM,UAAQ,CAAC;iBAClB;;;;;;KAIhB,CAAC;AAlBW,QAAA,gBAAgB,oBAkB3B;AAEF;;GAEG;AACI,IAAM,uBAAuB,GAAG,UAAO,SAAiB;;;;oBAE7C,qBAAM,oBAAY,CAAC,SAAS,CAAC,EAAA;;gBAArC,KAAK,GAAG,SAA6B;gBACvC,SAAS,GAAG,CAAC,CAAC;sBAEM,EAAL,eAAK;;;qBAAL,CAAA,mBAAK,CAAA;gBAAb,IAAI;gBACO,qBAAM,iBAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,EAAA;;gBAAvD,SAAS,GAAG,SAA2C;gBAC7D,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE;oBACpB,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC;iBAC/B;;;gBAJc,IAAK,CAAA;;oBAMxB,sBAAO,SAAS,EAAC;;;KACpB,CAAC;AAZW,QAAA,uBAAuB,2BAYlC;AAEF;;EAEE;AACK,IAAM,2BAA2B,GAAG,UAAC,SAAiB;IACzD,IAAI,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACtC,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,SAAS,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;KACjE;IACD,OAAO,SAAS,CAAC;AACrB,CAAC,CAAA;AAPY,QAAA,2BAA2B,+BAOvC;AAED;;EAEE;AACK,IAAM,kBAAkB,GAAG,UAAO,QAAgB;;;;oBACnC,qBAAM,iBAAS,CAAC,QAAQ,CAAC,EAAA;;gBAArC,SAAS,GAAG,SAAyB;gBAC3C,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE;oBACpB,sBAAO,SAAS,CAAC,IAAI,EAAC;iBACzB;;;;KACJ,CAAA;AALY,QAAA,kBAAkB,sBAK9B","sourcesContent":["import * as fs from \"fs\";\nimport path = require(\"path\");\nimport { promisify } from \"util\";\n\nexport const statAsync = promisify(fs.stat);\nexport const lstatAsync = promisify(fs.lstat);\nexport const mkdirAsync = promisify(fs.mkdir);\nexport const accessAsync = promisify(fs.access);\nexport const appendFileAsync = promisify(fs.appendFile);\nexport const writeFileAsync = promisify(fs.writeFile);\nexport const readFileAsync = promisify(fs.readFile);\nexport const readdirAsync = promisify(fs.readdir);\nexport const unlinkAsync = promisify(fs.unlink);\n\n/**\n * Validate directory exists.\n */\nexport const confirmDirExists = async (directory: string): Promise<void> => {\n    try {\n        const stats = await lstatAsync(directory);\n        if (!stats.isDirectory()) {\n            throw new Error(\"Path existed but was not a directory\");\n        }\n    } catch (err) {\n        if (err && err.code === \"ENOENT\") {\n            try {\n                await mkdirAsync(directory);\n            } catch (mkdirErr) {\n                if (mkdirErr && mkdirErr.code !== \"EEXIST\") {\n                    // Handle race condition by ignoring EEXIST\n                    throw mkdirErr;\n                }\n            }\n        }\n    }\n};\n\n/**\n * Computes the size (in bytes) of all files in a directory at the root level. Asynchronously.\n */\nexport const getShallowDirectorySize = async (directory: string): Promise<number> => {\n    // Get the directory listing\n    const files = await readdirAsync(directory);\n    let totalSize = 0;\n    // Query all file sizes\n    for (const file of files) {\n        const fileStats = await statAsync(path.join(directory, file));\n        if (fileStats.isFile()) {\n            totalSize += fileStats.size;\n        }\n    }\n    return totalSize;\n};\n\n/**\n* Computes the size (in bytes) of all files in a directory at the root level. Synchronously.\n*/\nexport const getShallowDirectorySizeSync = (directory: string): number => {\n    let files = fs.readdirSync(directory);\n    let totalSize = 0;\n    for (let i = 0; i < files.length; i++) {\n        totalSize += fs.statSync(path.join(directory, files[i])).size;\n    }\n    return totalSize;\n}\n\n/**\n* Computes the size (in bytes) of a file asynchronously.\n*/\nexport const getShallowFileSize = async (filePath: string): Promise<number> => {\n    const fileStats = await statAsync(filePath);\n    if (fileStats.isFile()) {\n        return fileStats.size;\n    }\n}\n\n"]}