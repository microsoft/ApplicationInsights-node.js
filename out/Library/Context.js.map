{"version":3,"file":"Context.js","sourceRoot":"","sources":["../../Library/Context.ts"],"names":[],"mappings":";AAAA,uBAA0B;AAC1B,uBAA0B;AAC1B,2BAA8B;AAE9B,qDAAwD;AACxD,uDAA6E;AAC7E,mCAAsC;AAEtC;IAQI,iBAAY,eAAwB;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,SAAS,CAAC,cAAc,EAAE,CAAC;QAC3C,IAAI,CAAC,IAAI,GAA8B,EAAE,CAAC;QAE1C,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;QAC9C,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChC,CAAC;IAEO,yCAAuB,GAA/B,UAAgC,eAAwB;QACpD,iDAAiD;QACjD,eAAe,GAAG,eAAe,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,0BAA0B,CAAC,CAAC;QAEzF,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;YACtC,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,SAAS,CAAC;YAChD,IAAI;gBACA,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,CAAC;gBACvE,IAAI,WAAW,IAAI,OAAO,WAAW,CAAC,OAAO,KAAK,QAAQ,EAAE;oBACxD,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC;iBAC7D;aACJ;YAAC,OAAO,SAAS,EAAE;gBAChB,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE,SAAS,CAAC,CAAC;aAC3D;SACJ;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;IAClF,CAAC;IAEO,oCAAkB,GAA1B;QACI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC7D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9E,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,eAAe,CAAC;QAEzD,yBAAyB;QACzB,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;QACxD,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC5D,CAAC;IAEO,sCAAoB,GAA5B;QACI,OAAO,CAAC,UAAU,GAAG,4CAAgC,CAAC;QACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC;IAC3E,CAAC;IA9Ca,uBAAe,GAAW,KAAK,CAAC;IAChC,kBAAU,GAA+B,EAAE,CAAC;IAC5C,kBAAU,GAAW,IAAI,CAAC;IA6C5C,cAAC;CAAA,AAnDD,IAmDC;AAED,iBAAS,OAAO,CAAC","sourcesContent":["import os = require(\"os\");\nimport fs = require(\"fs\");\nimport path = require(\"path\");\n\nimport Contracts = require(\"../Declarations/Contracts\");\nimport { APPLICATION_INSIGHTS_SDK_VERSION } from \"../Declarations/Constants\";\nimport Logging = require(\"./Logging\");\n\nclass Context {\n\n    public keys: Contracts.ContextTagKeys;\n    public tags: { [key: string]: string };\n    public static DefaultRoleName: string = \"Web\";\n    public static appVersion: { [path: string]: string } = {};\n    public static sdkVersion: string = null;\n\n    constructor(packageJsonPath?: string) {\n        this.keys = new Contracts.ContextTagKeys();\n        this.tags = <{ [key: string]: string }>{};\n\n        this._loadApplicationContext(packageJsonPath);\n        this._loadDeviceContext();\n        this._loadInternalContext();\n    }\n\n    private _loadApplicationContext(packageJsonPath?: string) {\n        // note: this should return the host package.json\n        packageJsonPath = packageJsonPath || path.resolve(__dirname, \"../../../../package.json\");\n\n        if (!Context.appVersion[packageJsonPath]) {\n            Context.appVersion[packageJsonPath] = \"unknown\";\n            try {\n                let packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf8\"));\n                if (packageJson && typeof packageJson.version === \"string\") {\n                    Context.appVersion[packageJsonPath] = packageJson.version;\n                }\n            } catch (exception) {\n                Logging.info(\"unable to read app version: \", exception);\n            }\n        }\n\n        this.tags[this.keys.applicationVersion] = Context.appVersion[packageJsonPath];\n    }\n\n    private _loadDeviceContext() {\n        this.tags[this.keys.deviceId] = \"\";\n        this.tags[this.keys.cloudRoleInstance] = os && os.hostname();\n        this.tags[this.keys.deviceOSVersion] = os && (os.type() + \" \" + os.release());\n        this.tags[this.keys.cloudRole] = Context.DefaultRoleName;\n\n        // not yet supported tags\n        this.tags[\"ai.device.osArchitecture\"] = os && os.arch();\n        this.tags[\"ai.device.osPlatform\"] = os && os.platform();\n    }\n\n    private _loadInternalContext() {\n        Context.sdkVersion = APPLICATION_INSIGHTS_SDK_VERSION;\n        this.tags[this.keys.internalSdkVersion] = \"node:\" + Context.sdkVersion;\n    }\n}\n\nexport = Context;\n"]}