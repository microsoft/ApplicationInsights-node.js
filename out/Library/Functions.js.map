{"version":3,"file":"Functions.js","sourceRoot":"","sources":["../../Library/Functions.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * The context object can be used for writing logs, reading data from bindings, setting outputs and using\n * the context.done callback when your exported function is synchronous. A context object is passed\n * to your function from the Azure Functions runtime on function invocation.\n */\nexport interface Context {\n    /**\n     * A unique GUID per function invocation.\n     */\n    invocationId?: string;\n    /**\n    * TraceContext information to enable distributed tracing scenarios.\n    */\n    traceContext: TraceContext;\n    /**\n     * HTTP request object. Provided to your function when using HTTP Bindings.\n     */\n    req?: HttpRequest;\n    /**\n     * HTTP response object. Provided to your function when using HTTP Bindings.\n     */\n    res?: {\n        [key: string]: any;\n    };\n}\n\n/**\n * HTTP request object. Provided to your function when using HTTP Bindings.\n */\nexport interface HttpRequest {\n    method: string | null;\n    url: string;\n    headers: {\n        [key: string]: string;\n    };\n}\n\n/**\n * TraceContext information to enable distributed tracing scenarios.\n */\nexport interface TraceContext {\n    /** Describes the position of the incoming request in its trace graph in a portable, fixed-length format. */\n    traceparent: string | null | undefined;\n    /** Extends traceparent with vendor-specific data. */\n    tracestate: string | null | undefined;\n    /** Holds additional properties being sent as part of request telemetry. */\n    attributes: {\n        [k: string]: string;\n    } | null | undefined;\n}\n"]}