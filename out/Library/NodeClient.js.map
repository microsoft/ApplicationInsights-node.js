{"version":3,"file":"NodeClient.js","sourceRoot":"","sources":["../../Library/NodeClient.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,mDAAsD;AACtD,sEAAyE;AACzE,0EAA6E;AAC7E,mCAAsC;AAGtC;;;;;GAKG;AACH;IAAyB,8BAAe;IAAxC;;IA6CA,CAAC;IA3CG;;;;;OAKG;IACI,6CAAwB,GAA/B,UAAgC,SAA6C;QACzE,IAAI,SAAS,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,QAAQ,EAAE;YAC5E,qBAAqB,CAAC,gBAAgB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SAC3D;aAAM;YACH,OAAO,CAAC,IAAI,CAAC,kHAAkH,CAAC,CAAC;SACpI;IACL,CAAC;IAED;;;;OAIG;IACI,yCAAoB,GAA3B,UAA4B,SAA6C;QACrE,IAAI,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,KAAK,EAAE;YACvC,OAAO,CAAC,IAAI,CAAC,4IAA4I,CAAC,CAAC;SAC9J;QACD,IAAI,SAAS,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,QAAQ,EAAE;YACtD,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SACvD;aAAM;YACH,OAAO,CAAC,IAAI,CAAC,oGAAoG,CAAC,CAAC;SACtH;IACL,CAAC;IAED;;;;OAIG;IACI,4CAAuB,GAA9B,UAA+B,SAAgD;QAC3E,IAAI,SAAS,IAAI,SAAS,CAAC,OAAO,EAAE;YAChC,qBAAqB,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SACvD;aACI;YACD,OAAO,CAAC,IAAI,CAAC,6FAA6F,CAAC,CAAC;SAC/G;IACL,CAAC;IACL,iBAAC;AAAD,CAAC,AA7CD,CAAyB,eAAe,GA6CvC;AAED,iBAAS,UAAU,CAAA","sourcesContent":["import http = require(\"http\");\nimport https = require(\"https\");\nimport TelemetryClient = require(\"./TelemetryClient\");\nimport ServerRequestTracking = require(\"../AutoCollection/HttpRequests\");\nimport ClientRequestTracking = require(\"../AutoCollection/HttpDependencies\");\nimport Logging = require(\"./Logging\");\nimport Contracts = require(\"../Declarations/Contracts\");\n\n/**\n * Application Insights Telemetry Client for Node.JS. Provides the Application Insights TelemetryClient API\n * in addition to Node-specific helper functions.\n * Construct a new TelemetryClient to have an instance with a different configuration than the default client.\n * In most cases, `appInsights.defaultClient` should be used instead.\n */\nclass NodeClient extends TelemetryClient {\n\n    /**\n     * Log RequestTelemetry from HTTP request and response. This method will log immediately without waiting for request completion\n     * and it requires duration parameter to be specified on NodeHttpRequestTelemetry object.\n     * Use trackNodeHttpRequest function to log the telemetry after request completion\n     * @param telemetry Object encapsulating incoming request, response and duration information\n     */\n    public trackNodeHttpRequestSync(telemetry: Contracts.NodeHttpRequestTelemetry) {\n        if (telemetry && telemetry.request && telemetry.response && telemetry.duration) {\n            ServerRequestTracking.trackRequestSync(this, telemetry);\n        } else {\n            Logging.warn(\"trackNodeHttpRequestSync requires NodeHttpRequestTelemetry object with request, response and duration specified.\");\n        }\n    }\n\n    /**\n     * Log RequestTelemetry from HTTP request and response. This method will `follow` the request to completion.\n     * Use trackNodeHttpRequestSync function to log telemetry immediately without waiting for request completion\n     * @param telemetry Object encapsulating incoming request and response information\n     */\n    public trackNodeHttpRequest(telemetry: Contracts.NodeHttpRequestTelemetry) {\n        if (telemetry.duration || telemetry.error) {\n            Logging.warn(\"trackNodeHttpRequest will ignore supplied duration and error parameters. These values are collected from the request and response objects.\");\n        }\n        if (telemetry && telemetry.request && telemetry.response) {\n            ServerRequestTracking.trackRequest(this, telemetry);\n        } else {\n            Logging.warn(\"trackNodeHttpRequest requires NodeHttpRequestTelemetry object with request and response specified.\");\n        }\n    }\n\n    /**\n     * Log DependencyTelemetry from outgoing HTTP request. This method will instrument the outgoing request and append\n     * the specified headers and will log the telemetry when outgoing request is complete\n     * @param telemetry Object encapsulating outgoing request information\n     */\n    public trackNodeHttpDependency(telemetry: Contracts.NodeHttpDependencyTelemetry) {\n        if (telemetry && telemetry.request) {\n            ClientRequestTracking.trackRequest(this, telemetry);\n        }\n        else {\n            Logging.warn(\"trackNodeHttpDependency requires NodeHttpDependencyTelemetry object with request specified.\");\n        }\n    }\n}\n\nexport = NodeClient"]}