{"version":3,"file":"AzureVirtualMachine.js","sourceRoot":"","sources":["../../Library/AzureVirtualMachine.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport http = require(\"http\");\nimport https = require(\"https\");\nimport Config = require(\"./Config\");\nimport Logging = require(\"./Logging\");\nimport Util = require(\"./Util\");\nimport AutoCollectHttpDependencies = require(\"../AutoCollection/HttpDependencies\");\n\nconst AIMS_URI = \"http://169.254.169.254/metadata/instance/compute\";\nconst AIMS_API_VERSION = \"api-version=2017-12-01\";\nconst AIMS_FORMAT = \"format=json\";\nconst ConnectionErrorMessage = \"UNREACH\"; // EHOSTUNREACH, ENETUNREACH\n\nexport interface IVirtualMachineInfo {\n    isVM?: boolean;\n    id?: string;\n    subscriptionId?: string;\n    osType?: string;\n}\n\nexport class AzureVirtualMachine {\n    public static HTTP_TIMEOUT: number = 2500; // 2.5 seconds\n\n    private static TAG = \"AzureVirtualMachine\";\n    private static _requestTimedOut: boolean;\n\n    public static getAzureComputeMetadata(config: Config, callback: (vm: IVirtualMachineInfo) => void) {\n        let vmInfo: IVirtualMachineInfo = {};\n        const metadataRequestUrl = `${AIMS_URI}?${AIMS_API_VERSION}&${AIMS_FORMAT}`;\n        const requestOptions: http.RequestOptions | https.RequestOptions = {\n            method: \"GET\",\n            [AutoCollectHttpDependencies.disableCollectionRequestOption]: true,\n            headers: {\n                \"Metadata\": \"True\"\n            }\n        };\n\n        const req = Util.makeRequest(config, metadataRequestUrl, requestOptions, (res) => {\n            if (res.statusCode === 200) {\n                // Success; VM\n                vmInfo.isVM = true;\n                let virtualMachineData = \"\";\n                res.on(\"data\", (data: any) => {\n                    virtualMachineData += data;\n                });\n                res.on(\"end\", () => {\n                    try {\n                        let data = JSON.parse(virtualMachineData);\n                        vmInfo.id = data[\"vmId\"] || \"\";\n                        vmInfo.subscriptionId = data[\"subscriptionId\"] || \"\";\n                        vmInfo.osType = data[\"osType\"] || \"\";\n                    }\n                    catch (error) {\n                        // Failed to parse JSON\n                        Logging.info(AzureVirtualMachine.TAG, error);\n                    }\n                    callback(vmInfo);\n                });\n            } else {\n                callback(vmInfo);\n            }\n        }, false, false);\n        if (req) {\n            setTimeout(() => {\n                this._requestTimedOut = true;\n                req.abort();\n            }, AzureVirtualMachine.HTTP_TIMEOUT);\n\n            req.on(\"error\", (error: Error) => {\n                // Unable to contact endpoint.\n                // Do nothing for now.\n                if (this._requestTimedOut) {\n                    if (error) {\n                        error.name = \"telemetry timeout\";\n                        error.message = \"telemetry request timed out\";\n                    }\n                }\n\n                if (error && error.message && error.message.indexOf(ConnectionErrorMessage) > -1) {\n                    vmInfo.isVM = false; // confirm it's not in VM\n                }\n                else {\n                    // Only log when is not determined if VM or not to avoid noise outside of Azure VMs\n                    Logging.info(AzureVirtualMachine.TAG, error);\n                }\n                callback(vmInfo);\n            });\n            req.end();\n        }\n    }\n}\n"]}