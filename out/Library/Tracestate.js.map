{"version":3,"file":"Tracestate.js","sourceRoot":"","sources":["../../Library/Tracestate.ts"],"names":[],"mappings":";AAAA;;;;GAIG;AACH;IAKI,iFAAiF;IACjF,oBAAY,EAAW;QAHhB,aAAQ,GAAa,EAAE,CAAC;QAI3B,IAAI,CAAC,EAAE,EAAE;YACL,OAAO;SACV;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC;IAEM,6BAAQ,GAAf;QACI,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE/B,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC;SACf;QAED,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAEc,2BAAgB,GAA/B,UAAgC,GAAW;QACvC,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;YACtB,iCAAiC;YACjC,IAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAClC,IAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAClC,IAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAC3E,IAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;YAC1E,OAAO,WAAW,IAAI,WAAW,CAAC;SACrC;aAAM,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;YAC7B,gCAAgC;YAChC,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;SAC9D;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,gCAAW,GAAnB,UAAoB,EAAU;QAC1B,IAAM,GAAG,GAAa,EAAE,CAAC;QACzB,IAAM,UAAU,GAA6B,EAAE,CAAC;QAChD,IAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,KAAK,CAAC,MAAM,GAAG,EAAE;YAAE,OAAO,IAAI,CAAC;QACnC,KAAoB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE;YAAtB,IAAI,OAAO,cAAA;YACZ,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,sBAAsB;YACnD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACnB,SAAS,CAAC,4DAA4D;aACzE;YAED,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,sCAAsC;YACtC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAC,CAAC,0CAA0C;aAC1D;YAED,0CAA0C;YAC1C,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gBACvC,OAAO,IAAI,CAAC;aACf;YAED,gCAAgC;YAChC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gBACrB,OAAO,IAAI,CAAC,CAAC,2CAA2C;aAC3D;iBAAM;gBACH,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;aAC7B;YAED,qCAAqC;YACrC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;QAED,OAAO,GAAG,CAAC;IACf,CAAC;IAzEa,iBAAM,GAAG,IAAI,CAAC;IA0EhC,iBAAC;CAAA,AA3ED,IA2EC;AAED,iBAAS,UAAU,CAAC","sourcesContent":["/**\n * Helper class to manage parsing and strict-validation of tracestate header. W3C tracestate spec\n * is documented at https://www.w3.org/TR/trace-context/#header-value\n * @class Tracestate\n */\nclass Tracestate {\n    public static strict = true;\n\n    public fieldmap: string[] = [];\n\n    // if true, performs strict tracestate header checking, else just passes it along\n    constructor(id?: string) {\n        if (!id) {\n            return;\n        }\n        this.fieldmap = this.parseHeader(id);\n    }\n\n    public toString(): string {\n        const fieldarr = this.fieldmap;\n\n        if (!fieldarr || fieldarr.length == 0) {\n            return null;\n        }\n\n        return fieldarr.join(\", \");\n    }\n\n    private static validateKeyChars(key: string): boolean {\n        const keyParts = key.split(\"@\");\n        if (keyParts.length == 2) {\n            // Parse for tenant@vendor format\n            const tenant = keyParts[0].trim();\n            const vendor = keyParts[1].trim();\n            const tenantValid = Boolean(tenant.match(/^[\\ ]?[a-z0-9\\*\\-\\_/]{1,241}$/));\n            const vendorValid = Boolean(vendor.match(/^[\\ ]?[a-z0-9\\*\\-\\_/]{1,14}$/));\n            return tenantValid && vendorValid;\n        } else if (keyParts.length == 1) {\n            // Parse for standard key format\n            return Boolean(key.match(/^[\\ ]?[a-z0-9\\*\\-\\_/]{1,256}$/));\n        }\n\n        return false;\n    }\n\n    private parseHeader(id: string): string[] {\n        const res: string[] = [];\n        const keydeduper: {[key: string]: boolean} = {};\n        const parts = id.split(\",\");\n        if (parts.length > 32) return null;\n        for (let rawPart of parts) {\n            const part = rawPart.trim(); // trim out whitespace\n            if (part.length === 0) {\n                continue; // Discard empty pairs, but keep the rest of this tracestate\n            }\n\n            const pair = part.split(\"=\");\n            // pair should contain exactly one \"=\"\n            if (pair.length !== 2) {\n                return null; // invalid pair: discard entire tracestate\n            }\n\n            // Validate length and charset of this key\n            if (!Tracestate.validateKeyChars(pair[0])) {\n                return null;\n            }\n\n            // Assert uniqueness of this key\n            if (keydeduper[pair[0]]) {\n                return null; // duplicate key: discard entire tracestate\n            } else {\n                keydeduper[pair[0]] = true\n            }\n\n            // All checks passed -- add this part\n            res.push(part);\n        }\n\n        return res;\n    }\n}\n\nexport = Tracestate;\n"]}