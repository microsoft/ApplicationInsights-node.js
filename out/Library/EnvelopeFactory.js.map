{"version":3,"file":"EnvelopeFactory.js","sourceRoot":"","sources":["../../Library/EnvelopeFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import Contracts = require(\"../Declarations/Contracts\")\nimport Util = require(\"./Util\")\nimport Config = require(\"./Config\");\nimport Context = require(\"./Context\");\nimport { CorrelationContextManager } from \"../AutoCollection/CorrelationContextManager\";\nimport { Telemetry } from \"../Declarations/Contracts\";\nimport Logging = require(\"./Logging\");\n\n\n/**\n * Manages the logic of creating envelopes from Telemetry objects\n */\nclass EnvelopeFactory {\n\n\n    /**\n     * Creates envelope ready to be sent by Channel\n     * @param telemetry Telemetry data\n     * @param telemetryType Type of telemetry\n     * @param commonProperties Bag of custom common properties to be added to the envelope\n     * @param context Client context\n     * @param config Client configuration\n     */\n    public static createEnvelope(\n        telemetry: Contracts.Telemetry,\n        telemetryType: Contracts.TelemetryType,\n        commonProperties?: { [key: string]: string; },\n        context?: Context,\n        config?: Config): Contracts.Envelope {\n\n        var data = null;\n\n\n        switch (telemetryType) {\n            case Contracts.TelemetryType.Trace:\n                data = EnvelopeFactory.createTraceData(<Contracts.TraceTelemetry>telemetry);\n                break;\n            case Contracts.TelemetryType.Dependency:\n                data = EnvelopeFactory.createDependencyData(<Contracts.DependencyTelemetry>telemetry);\n                break;\n            case Contracts.TelemetryType.Event:\n                data = EnvelopeFactory.createEventData(<Contracts.EventTelemetry>telemetry);\n                break;\n            case Contracts.TelemetryType.Exception:\n                data = EnvelopeFactory.createExceptionData(<Contracts.ExceptionTelemetry>telemetry);\n                break;\n            case Contracts.TelemetryType.Request:\n                data = EnvelopeFactory.createRequestData(<Contracts.RequestTelemetry>telemetry);\n                break;\n            case Contracts.TelemetryType.Metric:\n                data = EnvelopeFactory.createMetricData(<Contracts.MetricTelemetry>telemetry);\n                break;\n            case Contracts.TelemetryType.Availability:\n                data = EnvelopeFactory.createAvailabilityData(<Contracts.AvailabilityTelemetry>telemetry);\n                break;\n            case Contracts.TelemetryType.PageView:\n                data = EnvelopeFactory.createPageViewData(<Contracts.PageViewTelemetry>telemetry);\n                break;\n        }\n\n        if (data && data.baseData) {\n            if (Contracts.domainSupportsProperties(data.baseData)) { // Do instanceof check. TS will automatically cast and allow the properties property\n                if (commonProperties) {\n                    // if no properties are specified just add the common ones\n                    if (!data.baseData.properties) {\n                        data.baseData.properties = commonProperties;\n                    } else {\n                        // otherwise, check each of the common ones\n                        for (var name in commonProperties) {\n                            // only override if the property `name` has not been set on this item\n                            if (!data.baseData.properties[name]) {\n                                data.baseData.properties[name] = commonProperties[name];\n                            }\n                        }\n                    }\n                }\n                EnvelopeFactory.addAzureFunctionsCorrelationProperties(data.baseData.properties);\n                if (data.baseData.properties) {\n                    // sanitize properties\n                    data.baseData.properties = Util.validateStringMap(data.baseData.properties);\n                }\n            }\n        }\n\n        var iKey = config ? config.instrumentationKey || \"\" : \"\";\n        var envelope = new Contracts.Envelope();\n        envelope.data = data;\n        envelope.iKey = iKey;\n\n        // this is kind of a hack, but the envelope name is always the same as the data name sans the chars \"data\"\n        envelope.name =\n            \"Microsoft.ApplicationInsights.\" +\n            iKey.replace(/-/g, \"\") +\n            \".\" +\n            data.baseType.substr(0, data.baseType.length - 4);\n        envelope.tags = this.getTags(context, telemetry.tagOverrides);\n        envelope.time = (new Date()).toISOString();\n        envelope.ver = 1;\n        envelope.sampleRate = config ? config.samplingPercentage : 100;\n\n        // Exclude metrics from sampling by default\n        if (telemetryType === Contracts.TelemetryType.Metric) {\n            envelope.sampleRate = 100;\n        }\n\n        return envelope;\n    }\n\n    private static addAzureFunctionsCorrelationProperties(properties: { [key: string]: string; }) {\n        var correlationContext = CorrelationContextManager.getCurrentContext();\n        if (correlationContext && correlationContext.customProperties && correlationContext.customProperties[\"getProperty\"] instanceof Function) {\n            properties = properties || {}; // Initialize properties if not present\n            let property = correlationContext.customProperties.getProperty(\"InvocationId\");\n            if (property) {\n                properties[\"InvocationId\"] = property;\n            }\n            property = correlationContext.customProperties.getProperty(\"ProcessId\");\n            if (property) {\n                properties[\"ProcessId\"] = property;\n            }\n            property = correlationContext.customProperties.getProperty(\"LogLevel\");\n            if (property) {\n                properties[\"LogLevel\"] = property;\n            }\n            property = correlationContext.customProperties.getProperty(\"Category\");\n            if (property) {\n                properties[\"Category\"] = property;\n            }\n            property = correlationContext.customProperties.getProperty(\"HostInstanceId\");\n            if (property) {\n                properties[\"HostInstanceId\"] = property;\n            }\n            property = correlationContext.customProperties.getProperty(\"AzFuncLiveLogsSessionId\");\n            if (property) {\n                properties[\"AzFuncLiveLogsSessionId\"] = property;\n            }\n        }\n    }\n\n    private static truncateProperties(telemetry: Telemetry) {\n        if (telemetry.properties) {\n            try {\n                let properties: {[key: string]: any} = {};\n                const propertiesKeys = Object.keys(telemetry.properties);\n                const propertiesValues = Object.values(telemetry.properties);\n                for (let i = 0; i < propertiesKeys.length; i++) {\n                    if (propertiesKeys[i].length <= 150) {\n                        if (!Util.isDate(propertiesValues[i])) {\n                            if (propertiesValues[i] == null) {\n                                propertiesValues[i] = \"\";\n                            }\n                            if (typeof(propertiesValues[i]) === \"object\") {\n                                propertiesValues[i] = Util.stringify(propertiesValues[i]);\n                            }\n                            properties[propertiesKeys[i]] = String(propertiesValues[i]).substring(0, 8192);\n                        }\n                        properties[propertiesKeys[i]] = propertiesValues[i];\n                    }\n                }\n                return properties;\n            } catch(error) {\n                Logging.warn(\"Failed to properly truncate telemetry properties: \", error);\n            }\n        }\n    }\n\n    private static createTraceData(telemetry: Contracts.TraceTelemetry): Contracts.Data<Contracts.MessageData> {\n        var trace = new Contracts.MessageData();\n        trace.message = telemetry.message?.substring(0, 32768);\n        trace.properties = this.truncateProperties(telemetry);\n        if (!isNaN(telemetry.severity)) {\n            trace.severityLevel = telemetry.severity;\n        } else {\n            trace.severityLevel = Contracts.SeverityLevel.Information;\n        }\n\n        var data = new Contracts.Data<Contracts.MessageData>();\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Trace);\n        data.baseData = trace;\n        return data;\n    }\n\n    private static createDependencyData(telemetry: Contracts.DependencyTelemetry & Contracts.Identified): Contracts.Data<Contracts.RemoteDependencyData> {\n        var remoteDependency = new Contracts.RemoteDependencyData();\n        remoteDependency.name = telemetry.name?.substring(0, 1024);\n        remoteDependency.data = telemetry.data?.substring(0, 8192);\n        remoteDependency.target = telemetry.target?.substring(0, 1024);\n        remoteDependency.duration = Util.msToTimeSpan(telemetry.duration);\n        remoteDependency.success = telemetry.success;\n        remoteDependency.type = telemetry.dependencyTypeName;\n        remoteDependency.properties = this.truncateProperties(telemetry);\n        remoteDependency.resultCode = (telemetry.resultCode ? telemetry.resultCode.toString() : \"0\");\n\n        if (telemetry.id) {\n            remoteDependency.id = telemetry.id;\n        }\n        else {\n            remoteDependency.id = Util.w3cTraceId();\n        }\n\n        var data = new Contracts.Data<Contracts.RemoteDependencyData>();\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Dependency);\n        data.baseData = remoteDependency;\n        return data;\n    }\n\n    private static createEventData(telemetry: Contracts.EventTelemetry): Contracts.Data<Contracts.EventData> {\n        var event = new Contracts.EventData();\n        event.name = telemetry.name?.substring(0, 512);\n        event.properties = this.truncateProperties(telemetry);\n        event.measurements = telemetry.measurements;\n\n        var data = new Contracts.Data<Contracts.EventData>();\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Event);\n        data.baseData = event;\n        return data;\n    }\n\n    private static createExceptionData(telemetry: Contracts.ExceptionTelemetry): Contracts.Data<Contracts.ExceptionData> {\n        var exception = new Contracts.ExceptionData();\n        exception.properties = this.truncateProperties(telemetry);\n        if (!isNaN(telemetry.severity)) {\n            exception.severityLevel = telemetry.severity;\n        } else {\n            exception.severityLevel = Contracts.SeverityLevel.Error;\n        }\n        exception.measurements = telemetry.measurements;\n        exception.exceptions = [];\n\n        var stack = telemetry.exception[\"stack\"];\n        var exceptionDetails = new Contracts.ExceptionDetails();\n        exceptionDetails.message = telemetry.exception.message?.substring(0, 32768);\n        exceptionDetails.typeName = telemetry.exception.name?.substring(0, 1024);\n        exceptionDetails.parsedStack = this.parseStack(stack);\n        exceptionDetails.hasFullStack = Util.isArray(exceptionDetails.parsedStack) && exceptionDetails.parsedStack.length > 0;\n        exception.exceptions.push(exceptionDetails);\n\n        var data = new Contracts.Data<Contracts.ExceptionData>();\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Exception);\n        data.baseData = exception;\n        return data;\n    }\n\n    private static createRequestData(telemetry: Contracts.RequestTelemetry & Contracts.Identified): Contracts.Data<Contracts.RequestData> {\n        var requestData = new Contracts.RequestData();\n        if (telemetry.id) {\n            requestData.id = telemetry.id;\n        }\n        else {\n            requestData.id = Util.w3cTraceId();\n        }\n        requestData.name = telemetry.name?.substring(0, 1024);\n        requestData.url = telemetry.url?.substring(0, 2048);\n        requestData.source = telemetry.source?.substring(0, 1024);\n        requestData.duration = Util.msToTimeSpan(telemetry.duration);\n        requestData.responseCode = (telemetry.resultCode ? telemetry.resultCode.toString() : \"0\")?.substring(0, 1024);\n        requestData.success = telemetry.success;\n        requestData.properties = this.truncateProperties(telemetry);\n        requestData.measurements = telemetry.measurements;\n\n        var data = new Contracts.Data<Contracts.RequestData>();\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Request);\n        data.baseData = requestData;\n        return data;\n    }\n\n    private static createMetricData(telemetry: Contracts.MetricTelemetry): Contracts.Data<Contracts.MetricData> {\n        var metrics = new Contracts.MetricData(); // todo: enable client-batching of these\n        metrics.metrics = [];\n\n        var metric = new Contracts.DataPoint();\n        metric.count = !isNaN(telemetry.count) ? telemetry.count : 1;\n        metric.kind = Contracts.DataPointType.Aggregation;\n        metric.max = !isNaN(telemetry.max) ? telemetry.max : telemetry.value;\n        metric.min = !isNaN(telemetry.min) ? telemetry.min : telemetry.value;\n        metric.name = telemetry.name?.substring(0, 1024);\n        metric.stdDev = !isNaN(telemetry.stdDev) ? telemetry.stdDev : 0;\n        metric.value = telemetry.value;\n        metric.ns = telemetry.namespace;\n\n        metrics.metrics.push(metric);\n\n        metrics.properties = this.truncateProperties(telemetry);\n\n        var data = new Contracts.Data<Contracts.MetricData>();\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Metric);\n        data.baseData = metrics;\n        return data;\n    }\n\n    private static createAvailabilityData(\n        telemetry: Contracts.AvailabilityTelemetry & Contracts.Identified\n    ): Contracts.Data<Contracts.AvailabilityData> {\n        let availabilityData = new Contracts.AvailabilityData();\n\n        if (telemetry.id) {\n            availabilityData.id = telemetry.id;\n        } else {\n            availabilityData.id = Util.w3cTraceId();\n        }\n        availabilityData.name = telemetry.name?.substring(0, 1024);\n        availabilityData.duration = Util.msToTimeSpan(telemetry.duration);\n        availabilityData.success = telemetry.success;\n        availabilityData.runLocation = telemetry.runLocation;\n        availabilityData.message = telemetry.message?.substring(0, 8192);\n        availabilityData.measurements = telemetry.measurements;\n        availabilityData.properties = this.truncateProperties(telemetry);\n\n        let data = new Contracts.Data<Contracts.AvailabilityData>();\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Availability);\n        data.baseData = availabilityData;\n\n        return data;\n    }\n\n    private static createPageViewData(\n        telemetry: Contracts.PageViewTelemetry & Contracts.Identified\n    ): Contracts.Data<Contracts.PageViewData> {\n        let pageViewData = new Contracts.PageViewData();\n\n        pageViewData.name = telemetry.name?.substring(0, 1024);\n        pageViewData.duration = Util.msToTimeSpan(telemetry.duration);\n        pageViewData.url = telemetry.url?.substring(0, 2048);\n        pageViewData.measurements = telemetry.measurements;\n        pageViewData.properties = this.truncateProperties(telemetry);\n\n        let data = new Contracts.Data<Contracts.PageViewData>();\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.PageView);\n        data.baseData = pageViewData;\n\n        return data;\n    }\n\n    private static getTags(context: Context, tagOverrides?: { [key: string]: string; }) {\n        var correlationContext = CorrelationContextManager.getCurrentContext();\n\n        // Make a copy of context tags so we don't alter the actual object\n        // Also perform tag overriding\n        var newTags = <{ [key: string]: string }>{};\n\n        if (context && context.tags) {\n            for (var key in context.tags) {\n                newTags[key] = context.tags[key];\n            }\n        }\n        if (tagOverrides) {\n            for (var key in tagOverrides) {\n                newTags[key] = tagOverrides[key];\n            }\n        }\n\n        // Fill in internally-populated values if not already set\n        if (correlationContext) {\n            newTags[context.keys.operationId] = newTags[context.keys.operationId] || correlationContext.operation.id;\n            newTags[context.keys.operationName] = newTags[context.keys.operationName] || correlationContext.operation.name;\n            newTags[context.keys.operationParentId] = newTags[context.keys.operationParentId] || correlationContext.operation.parentId;\n        }\n\n        return newTags;\n    }\n\n\n    private static parseStack(stack: any): _StackFrame[] {\n        var parsedStack: _StackFrame[] = undefined;\n        if (typeof stack === \"string\") {\n            var frames = stack.split(\"\\n\");\n            parsedStack = [];\n            var level = 0;\n\n            var totalSizeInBytes = 0;\n            for (var i = 0; i <= frames.length; i++) {\n                var frame = frames[i];\n                if (_StackFrame.regex.test(frame)) {\n                    var parsedFrame = new _StackFrame(frames[i], level++);\n                    totalSizeInBytes += parsedFrame.sizeInBytes;\n                    parsedStack.push(parsedFrame);\n                }\n            }\n\n            // DP Constraint - exception parsed stack must be < 32KB\n            // remove frames from the middle to meet the threshold\n            var exceptionParsedStackThreshold = 32 * 1024;\n            if (totalSizeInBytes > exceptionParsedStackThreshold) {\n                var left = 0;\n                var right = parsedStack.length - 1;\n                var size = 0;\n                var acceptedLeft = left;\n                var acceptedRight = right;\n\n                while (left < right) {\n                    // check size\n                    var lSize = parsedStack[left].sizeInBytes;\n                    var rSize = parsedStack[right].sizeInBytes;\n                    size += lSize + rSize;\n\n                    if (size > exceptionParsedStackThreshold) {\n\n                        // remove extra frames from the middle\n                        var howMany = acceptedRight - acceptedLeft + 1;\n                        parsedStack.splice(acceptedLeft, howMany);\n                        break;\n                    }\n\n                    // update pointers\n                    acceptedLeft = left;\n                    acceptedRight = right;\n\n                    left++;\n                    right--;\n                }\n            }\n        }\n\n        return parsedStack;\n    }\n\n}\n\nclass _StackFrame {\n\n    // regex to match stack frames from ie/chrome/ff\n    // methodName=$2, fileName=$4, lineNo=$5, column=$6\n    public static regex = /^(\\s+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\n]+):(\\d+):(\\d+)(\\)?)$/;\n    public static baseSize = 58; //'{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\n    public sizeInBytes = 0;\n    public level: number;\n    public method: string;\n    public assembly: string;\n    public fileName: string;\n    public line: number;\n\n    constructor(frame: string, level: number) {\n        this.level = level;\n        this.method = \"<no_method>\";\n        this.assembly = Util.trim(frame);\n        var matches = frame.match(_StackFrame.regex);\n        if (matches && matches.length >= 5) {\n            this.method = Util.trim(matches[2]) || this.method;\n            this.fileName = Util.trim(matches[4]) || \"<no_filename>\";\n            this.line = parseInt(matches[5]) || 0;\n        }\n\n        this.sizeInBytes += this.method.length;\n        this.sizeInBytes += this.fileName.length;\n        this.sizeInBytes += this.assembly.length;\n\n        // todo: these might need to be removed depending on how the back-end settles on their size calculation\n        this.sizeInBytes += _StackFrame.baseSize;\n        this.sizeInBytes += this.level.toString().length;\n        this.sizeInBytes += this.line.toString().length;\n    }\n}\n\nexport = EnvelopeFactory;\n"]}