{"version":3,"file":"QuickPulseEnvelopeFactory.js","sourceRoot":"","sources":["../../Library/QuickPulseEnvelopeFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import os = require(\"os\");\nimport Contracts = require(\"../Declarations/Contracts\")\nimport Constants = require(\"../Declarations/Constants\");\nimport Util = require(\"./Util\")\nimport Config = require(\"./Config\");\nimport Context = require(\"./Context\");\nimport Logging = require(\"./Logging\");\n\nvar StreamId = Util.w3cTraceId(); // Create a guid\n\nclass QuickPulseEnvelopeFactory {\n    private static keys = new Contracts.ContextTagKeys();\n\n    public static createQuickPulseEnvelope(metrics: Contracts.MetricQuickPulse[], documents: Contracts.DocumentQuickPulse[], config: Config, context: Context): Contracts.EnvelopeQuickPulse {\n        const machineName = (os && typeof os.hostname === \"function\"\n            && os.hostname()) || \"Unknown\"; // Note: os.hostname() was added in node v0.3.3\n        const instance = (context.tags\n            && context.keys\n            && context.keys.cloudRoleInstance\n            && context.tags[context.keys.cloudRoleInstance]) || machineName;\n\n        const roleName = (context.tags\n            && context.keys\n            && context.keys.cloudRole\n            && context.tags[context.keys.cloudRole]) || null;\n\n        var envelope: Contracts.EnvelopeQuickPulse = {\n            Documents: documents.length > 0 ? documents : null,\n            InstrumentationKey: config.instrumentationKey || \"\",\n            Metrics: metrics.length > 0 ? metrics : null,\n            InvariantVersion: 1, //  1 -> v1 QPS protocol\n            Timestamp: `\\/Date(${Date.now()})\\/`,\n            Version: context.tags[context.keys.internalSdkVersion],\n            StreamId: StreamId,\n            MachineName: machineName,\n            Instance: instance,\n            RoleName: roleName\n        }\n\n        return envelope;\n    }\n\n    public static createQuickPulseMetric(\n        telemetry: Contracts.MetricTelemetry\n    ): Contracts.MetricQuickPulse {\n        var data: Contracts.MetricQuickPulse;\n        data = {\n            Name: telemetry.name, // TODO: map from MetricTelemetry name to QuickPulse name\n            Value: telemetry.value,\n            Weight: telemetry.count || 1\n        };\n        return data;\n    }\n\n    public static telemetryEnvelopeToQuickPulseDocument(envelope: Contracts.Envelope): Contracts.DocumentQuickPulse {\n        switch (envelope.data.baseType) {\n            case Contracts.TelemetryTypeString.Event:\n                return QuickPulseEnvelopeFactory.createQuickPulseEventDocument(envelope);\n            case Contracts.TelemetryTypeString.Exception:\n                return QuickPulseEnvelopeFactory.createQuickPulseExceptionDocument(envelope);\n            case Contracts.TelemetryTypeString.Trace:\n                return QuickPulseEnvelopeFactory.createQuickPulseTraceDocument(envelope);\n            case Contracts.TelemetryTypeString.Dependency:\n                return QuickPulseEnvelopeFactory.createQuickPulseDependencyDocument(envelope);\n            case Contracts.TelemetryTypeString.Request:\n                return QuickPulseEnvelopeFactory.createQuickPulseRequestDocument(envelope);\n        }\n        return null;\n    }\n\n    private static createQuickPulseEventDocument(envelope: Contracts.Envelope): Contracts.EventDocumentQuickPulse {\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\n        const name = ((envelope.data as any).baseData as Contracts.EventData).name;\n        const eventDocument: Contracts.EventDocumentQuickPulse = {\n            ...document,\n            Name: name\n        };\n\n        return eventDocument;\n    }\n\n    private static createQuickPulseTraceDocument(envelope: Contracts.Envelope): Contracts.MessageDocumentQuickPulse {\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\n        const severityLevel = ((envelope.data as any).baseData as Contracts.MessageData).severityLevel || 0;\n        var traceDocument: Contracts.MessageDocumentQuickPulse = {\n            ...document,\n            Message: ((envelope.data as any).baseData as Contracts.MessageData).message,\n            SeverityLevel: Contracts.SeverityLevel[severityLevel]\n        }\n\n        return traceDocument;\n    }\n\n    private static createQuickPulseExceptionDocument(envelope: Contracts.Envelope): Contracts.ExceptionDocumentQuickPulse {\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\n        const exceptionDetails = ((envelope.data as any).baseData as Contracts.ExceptionData).exceptions;\n\n        let exception = \"\";\n        let exceptionMessage = \"\";\n        let exceptionType = \"\";\n\n        // Try to fill exception information from first error only\n        if (exceptionDetails && exceptionDetails.length > 0) {\n            // Try to grab the stack from parsedStack or stack\n            if (exceptionDetails[0].parsedStack && exceptionDetails[0].parsedStack.length > 0) {\n                exceptionDetails[0].parsedStack.forEach(err => {\n                    exception += err.assembly + \"\\n\";\n                });\n            } else if (exceptionDetails[0].stack && exceptionDetails[0].stack.length > 0) {\n                exception = exceptionDetails[0].stack;\n            }\n\n            exceptionMessage = exceptionDetails[0].message;\n            exceptionType = exceptionDetails[0].typeName;\n        }\n\n        var exceptionDocument = {\n            ...document,\n            Exception: exception,\n            ExceptionMessage: exceptionMessage,\n            ExceptionType: exceptionType\n        };\n        return exceptionDocument;\n    }\n\n    private static createQuickPulseRequestDocument(envelope: Contracts.Envelope): Contracts.RequestDocumentQuickPulse {\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\n        const baseData = (envelope.data as Contracts.Data<Contracts.RequestData>).baseData;\n        const requestDocument: Contracts.RequestDocumentQuickPulse = {\n            ...document,\n            Name: baseData.name,\n            Success: baseData.success,\n            Duration: baseData.duration,\n            ResponseCode: baseData.responseCode,\n            OperationName: baseData.name // TODO: is this correct?\n        };\n\n        return requestDocument;\n    }\n\n    private static createQuickPulseDependencyDocument(envelope: Contracts.Envelope): Contracts.DependencyDocumentQuickPulse {\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\n        const baseData = (envelope.data as Contracts.Data<Contracts.RemoteDependencyData>).baseData;\n\n        const dependencyDocument: Contracts.DependencyDocumentQuickPulse = {\n            ...document,\n            Name: baseData.name,\n            Target: baseData.target,\n            Success: baseData.success,\n            Duration: baseData.duration,\n            ResultCode: baseData.resultCode,\n            CommandName: baseData.data,\n            OperationName: document.OperationId,\n            DependencyTypeName: baseData.type\n        }\n        return dependencyDocument;\n    }\n\n    private static createQuickPulseDocument(envelope: Contracts.Envelope): Contracts.DocumentQuickPulse {\n        let documentType: Constants.QuickPulseDocumentType;\n        let __type: Constants.QuickPulseType;\n        let operationId, properties;\n\n\n        if (envelope.data.baseType) {\n            __type = Constants.TelemetryTypeStringToQuickPulseType[envelope.data.baseType as Contracts.TelemetryTypeValues];\n            documentType = Constants.TelemetryTypeStringToQuickPulseDocumentType[envelope.data.baseType as Contracts.TelemetryTypeValues];\n        } else {\n            // Remark: This should never be hit because createQuickPulseDocument is only called within\n            // valid baseType values\n            Logging.warn(\"Document type invalid; not sending live metric document\", envelope.data.baseType);\n        }\n\n        operationId = envelope.tags[QuickPulseEnvelopeFactory.keys.operationId];\n        properties = QuickPulseEnvelopeFactory.aggregateProperties(envelope);\n\n        var document: Contracts.DocumentQuickPulse = {\n            DocumentType: documentType,\n            __type: __type,\n            OperationId: operationId,\n            Version: \"1.0\",\n            Properties: properties\n        };\n\n        return document;\n    }\n\n    private static aggregateProperties(envelope: Contracts.Envelope): Contracts.IDocumentProperty[] {\n        const properties: Contracts.IDocumentProperty[] = [];\n\n        // Collect measurements\n        const meas = ((envelope.data as any).baseData).measurements || {};\n        for (let key in meas) {\n            if (meas.hasOwnProperty(key)) {\n                const value = meas[key];\n                const property: Contracts.IDocumentProperty = {key, value};\n                properties.push(property);\n            }\n        }\n\n        // Collect properties\n        const props = ((envelope.data as any).baseData).properties || {};\n        for (let key in props) {\n            if (props.hasOwnProperty(key)) {\n                const value = props[key];\n                const property: Contracts.IDocumentProperty = {key, value};\n                properties.push(property);\n            }\n        }\n\n        return properties;\n    }\n}\n\nexport = QuickPulseEnvelopeFactory;\n"]}