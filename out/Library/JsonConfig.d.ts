import { IJsonConfig } from "../Declarations/Interfaces";
import { DistributedTracingModes } from "../applicationinsights";
import { IDisabledExtendedMetrics } from "../AutoCollection/NativePerformance";
export declare class JsonConfig implements IJsonConfig {
    private static _instance;
    connectionString: string;
    instrumentationKey: string;
    endpointUrl: string;
    maxBatchSize: number;
    maxBatchIntervalMs: number;
    disableAppInsights: boolean;
    samplingPercentage: number;
    correlationIdRetryIntervalMs: number;
    correlationHeaderExcludedDomains: string[];
    proxyHttpUrl: string;
    proxyHttpsUrl: string;
    ignoreLegacyHeaders: boolean;
    distributedTracingMode: DistributedTracingModes;
    enableAutoCollectExternalLoggers: boolean;
    enableAutoCollectConsole: boolean;
    enableAutoCollectExceptions: boolean;
    enableAutoCollectPerformance: boolean;
    enableAutoCollectExtendedMetrics: boolean | IDisabledExtendedMetrics;
    enableAutoCollectPreAggregatedMetrics: boolean;
    enableAutoCollectHeartbeat: boolean;
    enableAutoCollectRequests: boolean;
    enableAutoCollectDependencies: boolean;
    enableAutoDependencyCorrelation: boolean;
    enableAutoCollectIncomingRequestAzureFunctions: boolean;
    enableUseAsyncHooks: boolean;
    enableUseDiskRetryCaching: boolean;
    enableResendInterval: number;
    enableMaxBytesOnDisk: number;
    enableInternalDebugLogging: boolean;
    enableInternalWarningLogging: boolean;
    enableSendLiveMetrics: boolean;
    disableAllExtendedMetrics: boolean;
    extendedMetricDisablers: string;
    disableStatsbeat: boolean;
    noDiagnosticChannel: boolean;
    noPatchModules: string;
    noHttpAgentKeepAlive: boolean;
    quickPulseHost: string;
    enableWebInstrumentation: boolean;
    webInstrumentationConnectionString: string;
    webInstrumentationConfig: any;
    webInstrumentationSrc: string;
    enableAutoWebSnippetInjection: boolean;
    webSnippetConnectionString: string;
    static getInstance(): JsonConfig;
    constructor();
    private _loadJsonFile;
}
